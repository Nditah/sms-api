{"version":3,"sources":["../../../src/api/sms/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Sms","find","populate","select","exec","result","logger","info","error","message","fetchRecord","otp","toString","phone","body","send","sid","record","recipient","direction","newRecord","save","result1","console","log","update","otp_access","$inc","otp_count","User","findOneAndUpdate","new","to","createOtp","data","user","method","code","email","password","recipientArray","userId","created_by","findOne","_id","or","api_key","api_access","Joi","validate","schemaCreate","myArray","sendingSms","length","credit","Promise","all","map","resolvedFinalArray","result2","createRecord","createWebhook","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Sms, { schemaCreate } from \"./model\";\nimport { success, fail, notFound, generateOtp, hash, stringToArrayPhone } from \"../../lib\";\nimport { receiveSms, sendSmsAsync } from \"../../services\";\n\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[sms]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/sms.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Sms.find(filter)\n            .populate(\"created_by\", \"id phone email type\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createOtp(req, res) {\n    let otp = generateOtp().toString();\n    const { phone } = req.body;\n    if (!phone) fail(res, 422, \"Error invalid phone\");\n\n    try {\n        const send = await sendSmsAsync(phone, otp);\n        const { sid } = send;\n        if (!sid) return fail(res, 422, \"Error sending message\");\n        otp = hash(otp);\n        const record = { recipient: phone, message: otp, sid, direction: \"OUTBOUND\" };\n        const newRecord = new Sms(record);\n        const result1 = await newRecord.save();\n        console.log(result1);\n        const query = { phone };\n        const update = { otp, otp_access: true, $inc: { otp_count: 1 } };\n        const result = await User.findOneAndUpdate(query, update, { new: true });\n\n        if (!result) {\n            logger.info(\"Operation was successful\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, send.to, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    let data = {};\n    let user = {};\n    if (req.method === \"POST\") {\n        data = req.body;\n    } else {\n        data = req.query;\n    }\n    const { code, email, password } = data;\n    const { recipient: recipientArray } = data;\n    try {\n        const { created_by: userId } = data;\n        if (userId) {\n            user = await User.findOne({ _id: userId }).exec();\n        } else {\n            user = await User.findOne().or([\n                { api_key: code, api_access: true },\n                { email, password, api_access: true },\n            ]).exec();\n            data.created_by = user._id;\n        }\n        if (!user) return fail(res, 403, `Authentication failed for ${code} ${email}`);\n        const { error } = Joi.validate(data, schemaCreate);\n        if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n        const myArray = stringToArrayPhone(recipientArray) || [];\n        const sendingSms = myArray.length;\n        if (sendingSms > user.credit) {\n            return fail(res, 422, `Error! You have ${user.credit} units left. You cannot send ${sendingSms} sms`);\n            // console.log(`You have ${user.sms_units}Units left. You cannot send ${sendingSms}`);\n        }\n        const resolvedFinalArray = await Promise.all(myArray.map(async (phone) => {\n            const send = await sendSmsAsync(phone, data.message);\n            data.sid = send.sid;\n            data.recipient = phone;\n            const newRecord = new Sms(data);\n            const result = await newRecord.save();\n            return result; // important to return the value\n        }));\n\n        const result2 = await User.findOneAndUpdate({ _id: data.created_by },\n            { $inc: { credit: -sendingSms } }, { new: true });\n        console.log(result2.credit);\n        return success(res, 201, resolvedFinalArray, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function createWebhook(req, res) {\n    const data = req.body;\n    receiveSms(req, res);\n    logger.info(\"Operation was successful\", data);\n}\n"]}