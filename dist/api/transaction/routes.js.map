{"version":3,"sources":["../../../src/api/transaction/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","put","isValidAdmin","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAiBAF,OAAOG,GAAP,CAAW,eAAX,EAA4B,CAACC,wBAAD,EAAYC,0BAAZ,CAA5B,EAAsDC,uBAAtD;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAN,OAAOO,IAAP,CAAY,eAAZ,EAA6B,CAACH,wBAAD,EAAYC,0BAAZ,CAA7B,EAAuDG,wBAAvD;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBAR,OAAOS,GAAP,CAAW,yBAAX,EAAsC,CAACL,wBAAD,EAAYM,2BAAZ,CAAtC,EAAiEC,wBAAjE;;AAEA;;;;;;;;;;AAUAX,OAAOY,MAAP,CAAc,yBAAd,EAAyC,CAACR,wBAAD,EAAYM,2BAAZ,CAAzC,EAAoEG,wBAApE;;kBAEeb,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidUser, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/transactions?id={recordId} Retrieve one or all records\n * @apiName RetrieveTransaction\n * @apiGroup Transaction\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/transactions?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of transactions against various terminal bank-accounts.\n *  It is supplied by the banks. It is uploaded to this endpoint\n * to be Audited against Bank-Register records earlier recorded.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/transactions\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/v1/transactions Create transactions\n * @apiName CreateTransaction\n * @apiGroup Transaction\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} customer transaction reference txRef (required)\n * @apiParam {Number} amount Transaction amount paid (required)\n * @apiParam {String} code transaction reference txRef (required)\n * @apiParam {String} gateway_details transaction response Object (required)\n * @apiParam {Number} sms_units Transaction sms_units (required)\n * @apiParam {String} payment_method Transaction payment method GATEWAY (required)\n * @apiParam {String} payment_gateway Transaction payment gateway FLUTTERWAVE (required)\n * @apiParam {String} payment_status Transaction transaction status (prohibited)\n * @apiParam {String} description Transaction description(optional)\n * @apiParam {String} credit_status Transaction credit status (prohibited)\n * @apiSuccess {Object} Transaction Transaction's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Transaction not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/transactions\", [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {put} /api/v1/transactions/{recordId} Update transactions\n * @apiName UpdateTransaction\n * @apiGroup Transaction\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} customer transaction reference txRef (required)\n * @apiParam {Number} amount Transaction amount paid (required)\n * @apiParam {String} code transaction reference txRef (required)\n * @apiParam {String} gateway_details transaction response Object (required)\n * @apiParam {Number} sms_units Transaction sms_units (required)\n * @apiParam {String} payment_method Transaction payment method GATEWAY (required)\n * @apiParam {String} payment_gateway Transaction payment gateway FLUTTERWAVE (required)\n * @apiParam {String} payment_status Transaction transaction status (prohibited)\n * @apiParam {String} description Transaction description(optional)\n * @apiParam {String} credit_status Transaction credit status (prohibited)\n * @apiSuccess {Object} Transaction Transaction's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Transaction not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/transactions/:recordId\", [checkAuth, isValidAdmin], updateRecord);\n\n/**\n * @api {delete} /api/v1/transactions/{recordId} Delete transactions\n * @apiName DeleteTransaction\n * @apiGroup Transaction\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Transaction not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/transactions/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\nexport default router;\n"]}