{"version":3,"sources":["../../../src/api/message/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","user","type","id","Message","find","populate","select","exec","result","logger","info","error","message","fetchRecord","data","body","code","created_by","schemaCreate","validate","myArray","recipient","box","newRecord","sender","subject","sendToSelf","sendToRecipient","save","newRecord2","result2","createRecord","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, genCode, stringToArrayEmail } from \"../../lib\";\nimport { sendEmail } from \"../../services\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        if (req.user.type === \"CUSTOMER\") {\n            filter.user = req.user.id;\n        }\n        const result = await Message.find(filter)\n            .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n            .populate(\"created_by\", \"id phone email credit\")\n            .populate(\"updated_by\", \"id phone email credit\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    data.code = genCode(32);\n    data.user = data.created_by;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const myArray = stringToArrayEmail(data.recipient) || [];\n\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        const sendToSelf = await sendEmail(sender, sender, subject, body);\n        const sendToRecipient = await sendEmail(recipient, sender, subject, body);\n        const result = await newRecord.save();\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        if (!result) {\n            logger.error(\"Operation failed\", sendToSelf, sendToRecipient, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Message.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}