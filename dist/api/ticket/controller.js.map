{"version":3,"sources":["../../../src/api/ticket/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Ticket","find","populate","select","exec","result","logger","info","error","message","fetchRecord","data","body","schemaCreate","validate","newRecord","save","User","update","_id","user","$push","tickets","result2","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"@hapi/joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Ticket, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[ticket]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/ticket.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Ticket.find(filter)\n            .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"SUCCESS\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Ticket(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"SUCCESS\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $push: { tickets: result._id } }).exec();\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Ticket.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Ticket.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $pull: { tickets: result._id } }).exec();\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}