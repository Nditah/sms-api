{"version":3,"sources":["../../../src/api/notification/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","Joi","object","user","string","optional","message","status","valid","created_by","required","schemaUpdate","updated_by","schema","type","ref","String","enum","default","options","DATABASE","OPTIONS","newSchema","set","Notification","model"],"mappings":";;;;;;;AAQA;;;;AACA;;;;AACA;;AAEA;;;;;;AAZA;;;;;;;;IAcQA,M,GAAWC,kB,CAAXD,M;AAHR;;IAIQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAeC,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaC,QAAb,EAD6B;AAEnCC,aAASL,cAAIG,MAAJ,GAAaC,QAAb,EAF0B;AAGnCE,YAAQN,cAAIG,MAAJ,GAAaI,KAAb,CAAmB,SAAnB,EAA8B,QAA9B,EAAwCH,QAAxC,EAH2B;AAInCI,gBAAYR,cAAIG,MAAJ,GAAaM,QAAb;AAJuB,CAAX,CAArB;;AAOA,IAAMC,sCAAeV,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaC,QAAb,EAD6B;AAEnCC,aAASL,cAAIG,MAAJ,GAAaC,QAAb,EAF0B;AAGnCE,YAAQN,cAAIG,MAAJ,GAAaI,KAAb,CAAmB,SAAnB,EAA8B,QAA9B,EAAwCH,QAAxC,EAH2B;AAInCO,gBAAYX,cAAIG,MAAJ,GAAaM,QAAb;AAJuB,CAAX,CAArB;;AAOA,IAAMG,0BAAS;AAClBV,UAAM,EAAEW,MAAMhB,QAAR,EAAkBiB,KAAK,MAAvB,EADY;AAElBT,aAAS,EAAEQ,MAAME,MAAR,EAFS;AAGlBT,YAAQ,EAAEO,MAAME,MAAR,EAAgBC,MAAM,CAAC,SAAD,EAAY,QAAZ,CAAtB,EAA6CC,SAAS,SAAtD,EAHU;AAIlBT,gBAAY,EAAEK,MAAMhB,QAAR,EAAkBiB,KAAK,MAAvB,EAA+BL,UAAU,IAAzC,EAJM;AAKlBE,gBAAY,EAAEE,MAAMhB,QAAR,EAAkBiB,KAAK,MAAvB;AALM,CAAf;;AAQP,IAAMI,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI1B,MAAJ,CAAWiB,MAAX,EAAmBM,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,cAA5B;;AAEA,IAAMC,eAAe3B,mBAAS4B,KAAT,CAAe,cAAf,EAA+BH,SAA/B,CAArB;;kBAEeE,Y","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Notification primaryKey\n * @property {ObjectId} user Notification user ObjectId\n * @property {String} message Notification message\n * @property {String} status Notification record status \"PENDING|CLOSED\"\n * @description Notification model holds record of all Notification\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\n// eslint-disable-next-line import/no-cycle\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = Joi.object({\n    user: Joi.string().optional(),\n    message: Joi.string().optional(),\n    status: Joi.string().valid(\"PENDING\", \"CLOSED\").optional(),\n    created_by: Joi.string().required(),\n});\n\nexport const schemaUpdate = Joi.object({\n    user: Joi.string().optional(),\n    message: Joi.string().optional(),\n    status: Joi.string().valid(\"PENDING\", \"CLOSED\").optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    user: { type: ObjectId, ref: \"User\" },\n    message: { type: String },\n    status: { type: String, enum: [\"PENDING\", \"CLOSED\"], default: \"PENDING\" },\n    created_by: { type: ObjectId, ref: \"User\", required: true },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"notification\");\n\nconst Notification = mongoose.model(\"Notification\", newSchema);\n\nexport default Notification;\n"]}