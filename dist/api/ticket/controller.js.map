{"version":3,"sources":["../../../src/api/ticket/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","user","type","id","Ticket","find","populate","select","exec","result","logger","info","error","message","fetchRecord","data","body","schemaCreate","validate","newRecord","save","User","update","_id","$push","tickets","result2","createRecord","params","recordId","schemaUpdate","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","deleteRecord","log4js","getLogger","configure","appenders","file","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"@hapi/joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Ticket, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[ticket]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/ticket.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        if (req.user.type === \"CUSTOMER\") {\n            filter.user = req.user.id;\n        }\n        const result = await Ticket.find(filter)\n            .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Ticket(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"SUCCESS\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $push: { tickets: result._id } }).exec();\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Ticket.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Ticket.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $pull: { tickets: result._id } }).exec();\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}