{"version":3,"sources":["../../../src/api/ticket/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","Joi","object","user","string","required","subject","complaint","priority","valid","created_by","schemaUpdate","optional","resolve_status","updated_by","schema","type","ref","String","enum","default","options","DATABASE","OPTIONS","newSchema","set","Ticket","model"],"mappings":";;;;;;;AASA;;;;AACA;;;;AACA;;AAEA;;;;;;AAbA;;;;;;;;;IAeQA,M,GAAWC,kB,CAAXD,M;AAHR;;IAIQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAeC,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaC,QAAb,EAD6B;AAEnCC,aAASL,cAAIG,MAAJ,GAAaC,QAAb,EAF0B;AAGnCE,eAAWN,cAAIG,MAAJ,GAAaC,QAAb,EAHwB;AAInCG,cAAUP,cAAIG,MAAJ,GAAaK,KAAb,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,MAApC,EAA4CJ,QAA5C,EAJyB;AAKnCK,gBAAYT,cAAIG,MAAJ,GAAaC,QAAb;AALuB,CAAX,CAArB;;AAQA,IAAMM,sCAAeV,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaQ,QAAb,EAD6B;AAEnCN,aAASL,cAAIG,MAAJ,GAAaQ,QAAb,EAF0B;AAGnCL,eAAWN,cAAIG,MAAJ,GAAaQ,QAAb,EAHwB;AAInCJ,cAAUP,cAAIG,MAAJ,GAAaK,KAAb,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,MAApC,EAA4CG,QAA5C,EAJyB;AAKnCC,oBAAgBZ,cAAIG,MAAJ,GAAaQ,QAAb,EALmB;AAMnCE,gBAAYb,cAAIG,MAAJ,GAAaC,QAAb;AANuB,CAAX,CAArB;;AASA,IAAMU,0BAAS;AAClBZ,UAAM,EAAEa,MAAMlB,QAAR,EAAkBmB,KAAK,MAAvB,EADY;AAElBX,aAAS,EAAEU,MAAME,MAAR,EAFS;AAGlBX,eAAW,EAAES,MAAME,MAAR,EAHO;AAIlBV,cAAU,EAAEQ,MAAME,MAAR,EAAgBC,MAAM,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CAAtB,EAJQ;AAKlBN,oBAAgB;AACZG,cAAME,MADM;AAEZC,cAAM,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAFM;AAGZC,iBAAS;AAHG,KALE;AAUlBV,gBAAY,EAAEM,MAAMlB,QAAR,EAAkBO,UAAU,IAA5B,EAVM;AAWlBS,gBAAY,EAAEE,MAAMlB,QAAR,EAAkBmB,KAAK,MAAvB;AAXM,CAAf;;AAcP,IAAMI,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI5B,MAAJ,CAAWmB,MAAX,EAAmBM,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,QAA5B;;AAEA,IAAMC,SAAS7B,mBAAS8B,KAAT,CAAe,QAAf,EAAyBH,SAAzB,CAAf;;kBAEeE,M","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} user Ticket user\n * @property {String} subject Ticket subject\n * @property {String} complaint Ticket complaint\n * @property {String} priority Ticket priority \"LOW|NORMAL|HIGH\"\n * @property {String} resolve_status Ticket status \"OPEN|CLOSED|PENDING\"\n * @description Ticket records user issues to be resolved by Admin\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\n// eslint-disable-next-line import/no-cycle\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = Joi.object({\n    user: Joi.string().required(),\n    subject: Joi.string().required(),\n    complaint: Joi.string().required(),\n    priority: Joi.string().valid(\"LOW\", \"NORMAL\", \"HIGH\").required(),\n    created_by: Joi.string().required(),\n});\n\nexport const schemaUpdate = Joi.object({\n    user: Joi.string().optional(),\n    subject: Joi.string().optional(),\n    complaint: Joi.string().optional(),\n    priority: Joi.string().valid(\"LOW\", \"NORMAL\", \"HIGH\").optional(),\n    resolve_status: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    user: { type: ObjectId, ref: \"User\" },\n    subject: { type: String },\n    complaint: { type: String },\n    priority: { type: String, enum: [\"LOW\", \"NORMAL\", \"HIGH\"] },\n    resolve_status: {\n        type: String,\n        enum: [\"OPEN\", \"CLOSED\", \"PENDING\"],\n        default: \"PENDING\",\n    },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"ticket\");\n\nconst Ticket = mongoose.model(\"Ticket\", newSchema);\n\nexport default Ticket;\n"]}