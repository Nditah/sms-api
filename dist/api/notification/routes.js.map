{"version":3,"sources":["../../../src/api/notification/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","isValidAdmin","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,0BAAZ,CAA7B,EAAuDC,uBAAvD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYI,2BAAZ,CAA9B,EAAyDC,wBAAzD;;AAEA;;;;;;;;;;;;;;AAcAT,OAAOU,GAAP,CAAW,0BAAX,EAAuC,CAACN,wBAAD,EAAYC,0BAAZ,CAAvC,EAAiEM,wBAAjE;;AAEA;;;;;;;;;;AAUAX,OAAOY,MAAP,CAAc,0BAAd,EAA0C,CAACR,wBAAD,EAAYI,2BAAZ,CAA1C,EAAqEK,wBAArE;;kBAEeb,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidAdmin, isValidUser } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/notifications?id={recordId} Retrieve Notification records\n * @apiName RetrieveNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/notifications?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/notifications\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/v1/notifications Create a Notification record\n * @apiName CreateNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} user Notification user ObjectId\n * @apiParam {String} message Notification message\n * @apiParam {String} status Notification record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Notification Notification's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/notifications\", [checkAuth, isValidAdmin], createRecord);\n\n/**\n * @api {put} /api/v1/notifications/{recordId} Update a Notification record\n * @apiName UpdateNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {ObjectId} user Notification user ObjectId\n * @apiParam {String} message Notification message\n * @apiParam {String} status Notification record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Notification Notification's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/notifications/:recordId\", [checkAuth, isValidUser], updateRecord);\n\n/**\n * @api {delete} /api/v1/notifications/{recordId} Delete a Notification record\n * @apiName DeleteNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/notifications/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\nexport default router;\n"]}