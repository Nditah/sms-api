{"version":3,"sources":["../../../src/api/message/controller.js"],"names":["query","filter","skip","limit","sort","projection","Message","find","populate","select","exec","result","getMessage","req","res","logger","info","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","box","newRecord","recipient","sender","subject","User","findOne","_id","personR","Sender","created_by","personS","email","send1","send2","save","newRecord2","result2","createRecord","id","params","recordId","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdated } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../lib\";\nimport { sendEmail } from \"../../services\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function getMessage(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Message.find(filter)\n        .populate(\"user\", \"id phone email credit\")\n        .populate(\"created_by\", \"id phone email credit\")\n        .populate(\"updated_by\", \"id phone email credit\")\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const result = getMessage(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        const personR = await User.findOne({ _id: recipient }).select(\"email\").exec();\n        let Sender;\n        const personS = await Sender.findOne({ _id: data.created_by }).select(\"email\").exec();\n        const send1 = await sendEmail(personR.email, personS.email, subject, body);\n        const send2 = await sendEmail(personS.email, personS.email, subject, body);\n        // console.log(send);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(\"Operation failed\", send1, send2, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}