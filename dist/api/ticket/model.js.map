{"version":3,"sources":["../../../src/api/ticket/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","customer","Joi","string","required","subject","complaint","priority","created_by","schemaUpdate","optional","resolve_status","updated_by","schema","type","ref","String","enum","default","options","DATABASE","OPTIONS","newSchema","set","Ticket","model"],"mappings":";;;;;;;AASA;;;;AACA;;;;AACA;;AACA;;;;;;AAZA;;;;;;;;;IAcQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,cAAUC,cAAIC,MAAJ,GAAaC,QAAb,EADc;AAExBC,aAASH,cAAIC,MAAJ,GAAaC,QAAb,EAFe;AAGxBE,eAAWJ,cAAIC,MAAJ,GAAaC,QAAb,EAHa;AAIxBG,cAAUL,cAAIC,MAAJ,GAAaC,QAAb,EAJc;AAKxBI,gBAAYN,cAAIC,MAAJ,GAAaC,QAAb;AALY,CAArB;;AAQA,IAAMK,sCAAe;AACxBR,cAAUC,cAAIC,MAAJ,GAAaO,QAAb,EADc;AAExBL,aAASH,cAAIC,MAAJ,GAAaO,QAAb,EAFe;AAGxBJ,eAAWJ,cAAIC,MAAJ,GAAaO,QAAb,EAHa;AAIxBH,cAAUL,cAAIC,MAAJ,GAAaO,QAAb,EAJc;AAKxBC,oBAAgBT,cAAIC,MAAJ,GAAaO,QAAb,EALQ;AAMxBE,gBAAYV,cAAIC,MAAJ,GAAaC,QAAb;AANY,CAArB;;AASA,IAAMS,0BAAS;AAClBZ,cAAU,EAAEa,MAAMhB,QAAR,EAAkBiB,KAAK,UAAvB,EADQ;AAElBV,aAAS,EAAES,MAAME,MAAR,EAFS;AAGlBV,eAAW,EAAEQ,MAAME,MAAR,EAHO;AAIlBT,cAAU,EAAEO,MAAME,MAAR,EAAgBC,MAAM,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CAAtB,EAJQ;AAKlBN,oBAAgB;AACZG,cAAME,MADM;AAEZC,cAAM,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CAFM;AAGZC,iBAAS;AAHG,KALE;AAUlBV,gBAAY,EAAEM,MAAMhB,QAAR,EAAkBM,UAAU,IAA5B,EAVM;AAWlBQ,gBAAY,EAAEE,MAAMhB,QAAR,EAAkBiB,KAAK,MAAvB;AAXM,CAAf;;AAcP,IAAMI,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI1B,MAAJ,CAAWiB,MAAX,EAAmBM,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,QAA5B;;AAEA,IAAMC,SAAS3B,mBAAS4B,KAAT,CAAe,QAAf,EAAyBH,SAAzB,CAAf;;kBAEeE,M","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} customer Ticket customer\n * @property {String} subject Ticket subject\n * @property {String} complaint Ticket complaint\n * @property {String} priority Ticket priority \"LOW|NORMAL|HIGH\"\n * @property {String} resolve_status Ticket status \"OPEN|CLOSED|PENDING\"\n * @description Ticket records customer issues to be resolved by Admin\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    customer: Joi.string().required(),\n    subject: Joi.string().required(),\n    complaint: Joi.string().required(),\n    priority: Joi.string().required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    customer: Joi.string().optional(),\n    subject: Joi.string().optional(),\n    complaint: Joi.string().optional(),\n    priority: Joi.string().optional(),\n    resolve_status: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    customer: { type: ObjectId, ref: \"Customer\" },\n    subject: { type: String },\n    complaint: { type: String },\n    priority: { type: String, enum: [\"LOW\", \"NORMAL\", \"HIGH\"] },\n    resolve_status: {\n        type: String,\n        enum: [\"OPEN\", \"CLOSED\", \"PENDING\"],\n        default: \"PENDING\",\n    },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"ticket\");\n\nconst Ticket = mongoose.model(\"Ticket\", newSchema);\n\nexport default Ticket;\n"]}