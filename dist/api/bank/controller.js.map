{"version":3,"sources":["../../../src/api/bank/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Bank","find","select","exec","result","logger","info","error","message","fetchRecord","data","body","schemaCreate","validate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Bank, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib\";\n\n// Logging\nconst logger = log4js.getLogger(\"[bank]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/bank.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Bank.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Bank(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"Operation was successful\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Bank.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Bank.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}