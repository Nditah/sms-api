{"version":3,"sources":["../../../src/api/transaction/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","Joi","object","user","string","required","amount","number","code","trim","gateway_details","optional","sms_units","payment_method","valid","payment_gateway","payment_status","description","created_by","schemaUpdate","credit_status","updated_by","schema","type","ref","Number","String","alias","uppercase","unique","id","charged_amount","accountId","userId","currency","enum","Object","values","PAYMENT","METHOD","default","CASH","GATEWAY","FLUTTERWAVE","STATUS","PENDING","options","DATABASE","OPTIONS","newSchema","set","Transaction","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} user transaction reference txRef (required)\n * @property {Number} amount Transaction amount paid (required)\n * @property {String} code transaction reference txRef (required)\n * @property {String} gateway_details transaction response Object (required)\n * @property {Number} sms_units Transaction sms_units (required)\n * @property {String} payment_method Transaction payment method GATEWAY (required)\n * @property {String} payment_gateway Transaction payment gateway FLUTTERWAVE (required)\n * @property {String} payment_status Transaction transaction status (prohibited)\n * @property {String} description Transaction description(optional)\n * @property {String} credit_status Transaction credit status (prohibited)\n * @description Transaction model holds record of all banks transactions records\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE, PAYMENT } from \"../../constants\";\n// eslint-disable-next-line import/no-cycle\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = Joi.object({\n    user: Joi.string().required(),\n    amount: Joi.number().required(),\n    code: Joi.string().trim().required(),\n    gateway_details: Joi.object().optional(),\n    sms_units: Joi.number().required(),\n    payment_method: Joi.string().valid(\"GATEWAY\", \"POS\", \"CASH\", \"CHEQUE\", \"TRANSFER\", \"USSD\").required(),\n    payment_gateway: Joi.string().valid(\"FLUTTERWAVE\", \"INTERSWITCH\", \"UNIONBANK\", \"PAYSTACK\", \"STRIPE\", \"PAYPAL\", \"GOOGLE_WALLET\").required(),\n    payment_status: Joi.string().valid(\"PENDING\", \"SUCCESSFUL\", \"FAIL\").required(),\n    description: Joi.string().optional(),\n    created_by: Joi.string().required(),\n});\n\nexport const schemaUpdate = Joi.object({\n    user: Joi.string().optional(),\n    amount: Joi.number().optional(),\n    code: Joi.string().trim().optional(),\n    gateway_details: Joi.object().optional(),\n    sms_units: Joi.number().optional(),\n    payment_method: Joi.string().valid(\"GATEWAY\", \"POS\", \"CASH\", \"CHEQUE\", \"TRANSFER\", \"USSD\").optional(),\n    payment_gateway: Joi.string().valid(\"FLUTTERWAVE\", \"INTERSWITCH\", \"UNIONBANK\", \"PAYSTACK\", \"STRIPE\", \"PAYPAL\", \"GOOGLE_WALLET\").optional(),\n    payment_status: Joi.string().valid(\"PENDING\", \"SUCCESSFUL\", \"FAIL\").optional(),\n    description: Joi.string().optional(),\n    credit_status: Joi.string().valid(\"PENDING\", \"CREDITED\", \"REJECTED\").optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    user: { type: ObjectId, required: true, ref: \"User\" },\n    amount: { type: Number, required: [true, \"Why no amount?\"] },\n    code: { type: String, alias: \"trxref\", uppercase: true, unique: true, required: true },\n    gateway_details: {\n        id: { type: Number },\n        charged_amount: { type: Number },\n        accountId: { type: Number },\n        userId: { type: Number },\n        currency: { type: String },\n    },\n    sms_units: { type: Number, required: [true, \"Why no sms units?\"] },\n    payment_method: {\n        type: String,\n        enum: Object.values(PAYMENT.METHOD),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.METHOD.CASH,\n    },\n    payment_gateway: {\n        type: String,\n        enum: Object.values(PAYMENT.GATEWAY),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.GATEWAY.FLUTTERWAVE,\n    },\n    payment_status: {\n        type: String,\n        enum: Object.values(PAYMENT.STATUS),\n        required: [true, \"Why no payment_status?\"],\n        default: PAYMENT.STATUS.PENDING,\n    },\n    description: { type: String },\n    credit_status: {\n        type: String,\n        enum: [\"PENDING\", \"CREDITED\", \"REJECTED\"],\n        required: [true, \"Why no credit_status?\"],\n        default: \"PENDING\",\n    },\n    created_by: { type: ObjectId, ref: \"User\", required: true },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"transaction\");\n\nconst Transaction = mongoose.model(\"Transaction\", newSchema);\n\nexport default Transaction;\n"]}