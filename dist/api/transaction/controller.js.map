{"version":3,"sources":["../../../src/api/transaction/controller.js"],"names":["query","filter","skip","limit","sort","projection","Transaction","find","populate","select","exec","result","getTransaction","req","res","logger","info","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Transaction, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[transaction]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/transaction.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function getTransaction(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Transaction.find(filter)\n        .populate(\"user\", \"id phone email credit\")\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const result = getTransaction(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Transaction(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"SUCCESS\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Transaction.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Transaction.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}