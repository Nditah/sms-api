{"version":3,"sources":["../../../src/api/ticket/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","put","isValidAdmin","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,0BAAZ,CAAvB,EAAiDC,uBAAjD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,0BAAZ,CAAxB,EAAkDG,wBAAlD;;AAEA;;;;;;;;;;;;;;;;AAgBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYM,4BAAZ,CAAjC,EAA4DC,wBAA5D;;AAEA;;;;;;;;;;AAUAX,OAAOY,MAAP,CAAc,oBAAd,EAAoC,CAACR,wBAAD,EAAYM,4BAAZ,CAApC,EAA+DG,wBAA/D;;kBAEeb,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidUser } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\nimport { isValidAdmin } from \"../../../../../calorie-api-backup/src/middleware/authorization\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/tickets?id={recordId} Retrieve Ticket records\n * @apiName RetrieveTicket\n * @apiGroup Ticket\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/tickets?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/tickets\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/v1/tickets Create a Ticket record\n * @apiName CreateTicket\n * @apiGroup Ticket\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} customer Ticket customer\n * @apiParam {String} subject Ticket subject\n * @apiParam {String} complaint Ticket complaint\n * @apiParam {String} priority Ticket priority \"LOW|NORMAL|HIGH\"\n * @apiParam {String} resolve_status Ticket status \"OPEN|CLOSED|PENDING\"\n * @apiSuccess {Object} Ticket Ticket's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Ticket not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/tickets\", [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {put} /api/v1/tickets/{recordId} Update a Ticket record\n * @apiName UpdateTicket\n * @apiGroup Ticket\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {ObjectId} customer Ticket customer\n * @apiParam {String} subject Ticket subject\n * @apiParam {String} complaint Ticket complaint\n * @apiParam {String} priority Ticket priority \"LOW|NORMAL|HIGH\"\n * @apiParam {String} resolve_status Ticket status \"OPEN|CLOSED|PENDING\"\n * @apiSuccess {Object} Ticket Ticket's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Ticket not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/tickets/:recordId\", [checkAuth, isValidAdmin], updateRecord);\n\n/**\n * @api {delete} /api/v1/tickets/{recordId} Delete a Ticket record\n * @apiName DeleteTicket\n * @apiGroup Ticket\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Ticket not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/tickets/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\nexport default router;\n"]}