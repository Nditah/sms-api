{"version":3,"sources":["../../../src/api/user/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","user","type","id","User","find","select","exec","result","logger","info","error","message","fetchRecord","data","body","api_key","toLowerCase","password","schemaCreate","validate","email","phone","findOne","$or","duplicate","newRecord","save","createRecord","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","console","log","schemaLogin","then","userToken","catch","err","login","log4js","getLogger","configure","appenders","file","filename","categories","default","level"],"mappings":";;;;;;;;uEAcO,iBAA2BA,GAA3B,EAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,6BADL,GACeF,GADf,CACKE,KADL;AAAA,+BAE+C,8BAAIA,KAAJ,CAF/C,EAEKC,MAFL,QAEKA,MAFL,EAEaC,IAFb,QAEaA,IAFb,EAEmBC,KAFnB,QAEmBA,KAFnB,EAE0BC,IAF1B,QAE0BA,IAF1B,EAEgCC,UAFhC,QAEgCA,UAFhC;AAAA;;AAIC,4BAAIP,IAAIQ,IAAJ,CAASC,IAAT,KAAkB,UAAtB,EAAkC;AAC9BN,mCAAOK,IAAP,GAAcR,IAAIQ,IAAJ,CAASE,EAAvB;AACH;AANF;AAOgB,+BAAMC,gBAAKC,IAAL,CAAUT,MAAV,EAChBC,IADgB,CACXA,IADW,EAEhBC,KAFgB,CAEVA,KAFU,EAGhBC,IAHgB,CAGXA,IAHW,EAIhBO,MAJgB,CAITN,UAJS,EAKhBO,IALgB,EAAN;;AAPhB;AAOOC,8BAPP;;AAAA,4BAaMA,MAbN;AAAA;AAAA;AAAA;;AAAA,yDAcY,mBAASd,GAAT,EAAc,qCAAd,CAdZ;;AAAA;AAgBCe,+BAAOC,IAAP,CAAY,SAAZ,EAAuB,EAAvB;AAhBD,yDAiBQ,kBAAQhB,GAAR,EAAa,GAAb,EAAkBc,MAAlB,EAA0B,IAA1B,CAjBR;;AAAA;AAAA;AAAA;;AAmBCC,+BAAOE,KAAP;AAnBD,yDAoBQ,eAAKjB,GAAL,EAAU,GAAV,gCAA2C,YAAIkB,OAA/C,CApBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,W;;;;;AAwBtB;;;;wEACO,kBAA4BpB,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGoB,4BADH,GACUrB,IAAIsB,IADd;;AAEHD,6BAAKE,OAAL,GAAe,sBAAQ,EAAR,EAAYC,WAAZ,EAAf;AACA,4BAAI,kBAAQH,IAAR,EAAc,UAAd,CAAJ,EAA+BA,KAAKI,QAAL,GAAgB,eAAKzB,IAAIsB,IAAJ,CAASG,QAAd,CAAhB;AAH5B,gDAIeC,oBAAaC,QAAb,CAAsBN,IAAtB,CAJf,EAIKH,KAJL,yBAIKA,KAJL;;AAAA,6BAKCA,KALD;AAAA;AAAA;AAAA;;AAAA,0DAKe,eAAKjB,GAAL,EAAU,GAAV,sCAAiDiB,MAAMC,OAAvD,CALf;;AAAA;AAMKS,6BANL,GAMsBP,IANtB,CAMKO,KANL,EAMYC,KANZ,GAMsBR,IANtB,CAMYQ,KANZ;AAAA;AAOe,+BAAMlB,gBAAKmB,OAAL,CAAa,EAAEC,KAAK,CAAC,EAAEH,YAAF,EAAD,EAAY,EAAEC,YAAF,EAAZ,CAAP,EAAb,EAA8Cf,IAA9C,EAAN;;AAPf;AAOGkB,iCAPH;;AAAA,6BAQCA,SARD;AAAA;AAAA;AAAA;;AAAA,0DASQ,eAAK/B,GAAL,EAAU,GAAV,uCAAkD2B,KAAlD,YAA8DC,KAA9D,CATR;;AAAA;AAWGI,iCAXH,GAWe,IAAItB,eAAJ,CAASU,IAAT,CAXf;AAAA;AAAA;AAagB,+BAAMY,UAAUC,IAAV,EAAN;;AAbhB;AAaOnB,8BAbP;;AAAA,4BAcMA,MAdN;AAAA;AAAA;AAAA;;AAeKC,+BAAOC,IAAP,CAAY,SAAZ,EAAuB,EAAvB;AAfL,0DAgBY,mBAAShB,GAAT,EAAc,qCAAd,CAhBZ;;AAAA;AAAA,0DAkBQ,kBAAQA,GAAR,EAAa,GAAb,EAAkBc,MAAlB,EAA0B,8BAA1B,CAlBR;;AAAA;AAAA;AAAA;;AAoBCC,+BAAOE,KAAP;AApBD,0DAqBQ,eAAKjB,GAAL,EAAU,GAAV,8BAAyC,aAAIkB,OAA7C,CArBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAegB,Y;;;;;;wEAyBf,kBAA4BnC,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGoB,4BADH,GACUrB,IAAIsB,IADd;AAEeZ,0BAFf,GAEsBV,IAAIoC,MAF1B,CAEKC,QAFL;;AAGH,4BAAI,kBAAQhB,IAAR,EAAc,UAAd,CAAJ,EAA+BA,KAAKI,QAAL,GAAgB,eAAKzB,IAAIsB,IAAJ,CAASG,QAAd,CAAhB;AAH5B,gDAIea,oBAAaX,QAAb,CAAsBN,IAAtB,CAJf,EAIKH,KAJL,yBAIKA,KAJL;;AAAA,6BAKCA,KALD;AAAA;AAAA;AAAA;;AAAA,0DAKe,eAAKjB,GAAL,EAAU,GAAV,sCAAiDiB,MAAMC,OAAvD,CALf;;AAAA;AAAA;AAAA;AAOgB,+BAAMR,gBAAK4B,gBAAL,CAAsB,EAAEC,KAAK9B,EAAP,EAAtB,EAAmCW,IAAnC,EAAyC,EAAEoB,KAAK,IAAP,EAAzC,CAAN;;AAPhB;AAOO1B,8BAPP;;AAAA,4BAQMA,MARN;AAAA;AAAA;AAAA;;AAAA,0DASY,mBAASd,GAAT,4CAAsDS,EAAtD,CATZ;;AAAA;AAAA,0DAWQ,kBAAQT,GAAR,EAAa,GAAb,EAAkBc,MAAlB,EAA0B,8BAA1B,CAXR;;AAAA;AAAA;AAAA;;AAaCC,+BAAOE,KAAP;AAbD,0DAcQ,eAAKjB,GAAL,EAAU,GAAV,8BAAyC,aAAIkB,OAA7C,CAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeuB,Y;;;;;;wEAkBf,kBAA4B1C,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACeS,0BADf,GACsBV,IAAIoC,MAD1B,CACKC,QADL;AAAA;AAAA;AAGgB,+BAAM1B,gBAAKgC,gBAAL,CAAsB,EAAEH,KAAK9B,EAAP,EAAtB,CAAN;;AAHhB;AAGOK,8BAHP;;AAAA,4BAIMA,MAJN;AAAA;AAAA;AAAA;;AAAA,0DAKY,mBAASd,GAAT,4CAAsDS,EAAtD,CALZ;;AAAA;AAAA,0DAOQ,kBAAQT,GAAR,EAAa,GAAb,EAAkBc,MAAlB,EAA0B,8BAA1B,CAPR;;AAAA;AAAA;AAAA;;AASCC,+BAAOE,KAAP;AATD,0DAUQ,eAAKjB,GAAL,EAAU,GAAV,8BAAyC,aAAIkB,OAA7C,CAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeyB,Y;;;;;;wEAcf,kBAAqB5C,GAArB,EAA0BC,GAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACH4C,gCAAQC,GAAR,CAAY9C,IAAIsB,IAAhB;AADG,gDAEeyB,mBAAYpB,QAAZ,CAAqB3B,IAAIsB,IAAzB,CAFf,EAEKJ,KAFL,yBAEKA,KAFL;;AAAA,6BAGCA,KAHD;AAAA;AAAA;AAAA;;AAAA,0DAGe,eAAKjB,GAAL,EAAU,GAAV,sCAAiDiB,MAAMC,OAAvD,CAHf;;AAAA;AAAA,0DAII,gCAAiBnB,IAAIsB,IAArB,EACF0B,IADE,CACG;AAAA,mCAAa,kBAAQ/C,GAAR,EAAa,GAAb,EAAkBgD,SAAlB,EAA6B,uBAA7B,CAAb;AAAA,yBADH,EAEFC,KAFE,CAEI;AAAA,mCAAO,eAAKjD,GAAL,EAAU,GAAV,8BAAyCkD,IAAIhC,OAA7C,CAAP;AAAA,yBAFJ,CAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiC,K;;;;;AAhGtB;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA;AACA,IAAMpC,SAASqC,iBAAOC,SAAP,CAAiB,QAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEhD,MAAM,MAAR,EAAgBiD,UAAU,eAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEJ,WAAW,CAAC,MAAD,CAAb,EAAuBK,OAAO,OAA9B,EAAX;AAFC,CAAjB","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport User, { schemaCreate, schemaUpdate, schemaLogin } from \"./model\";\nimport { success, fail, notFound, hasProp, hash } from \"../../lib\";\nimport { userAuthenticate } from \"../../services\";\nimport { genCode } from \"../../lib/helpers\";\n\n// Logging\nconst logger = log4js.getLogger(\"[user]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/user.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        if (req.user.type === \"CUSTOMER\") {\n            filter.user = req.user.id;\n        }\n        const result = await User.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"SUCCESS\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    data.api_key = genCode(32).toLowerCase();\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const { email, phone } = data;\n    const duplicate = await User.findOne({ $or: [{ email }, { phone }] }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Record already exist for ${email} or ${phone}`);\n    }\n    const newRecord = new User(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"SUCCESS\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await User.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await User.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\nexport async function login(req, res) {\n    console.log(req.body);\n    const { error } = schemaLogin.validate(req.body);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    return userAuthenticate(req.body)\n        .then(userToken => success(res, 201, userToken, \"Login was successful!\"))\n        .catch(err => fail(res, 403, `Authentication failed  ${err.message}`));\n}\n"]}