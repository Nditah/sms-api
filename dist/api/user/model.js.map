{"version":3,"sources":["../../../src/api/user/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","given_name","gender","phone_personal","address","country_iso2","created_by","required","schemaUpdate","api_key","api_access","boolean","otp_count","number","otp_access","updated_by","schema","String","enum","uppercase","default","lowercase","unique","Boolean","Object","values","GENDER","MALE","alias","match","confirmed_email","confirmed_phone","Number","credit","notifications","ref","transactions","remark","deleted","deleted_at","Date","deleted_by","blocked","blocked_at","blocked_by","last_login","last_ip","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","User","model","findOne","then","user","console","log","table","newRecord","newRecord2","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Deapi_keyr\n * @property {String} id User ObjectId primaryKey\n * @property {String} type User type (optional)\n * @property {String} api_key User api access key (prohibited)\n * @property {Boolean} api_access User api_access (optional)\n * @property {String} title User title (optional)\n * @property {String} surname User surname (required)\n * @property {String} given_name User given_name (required)\n * @property {String} gender User gender (required)\n * @property {String} phone User office phone (required)\n * @property {String} phone_personal User phone_personal (optional)\n * @property {String} address User address (optional)\n * @property {String} country_iso2 User country_iso2 (optional)\n * @property {String} email User email (optional)\n * @property {String} password User password (optional)\n * @property {String} otp User otp (optional)\n * @property {Number} otp_count User otp_count (optional)\n * @property {Boolean} otp_access User otp_access (optional)\n * @property {Number} credit User credit (optional)\n * @property {Array} notifications User notifications (optional)\n * @property {String} remark User remark (optional)\n * @property {Boolean} deleted User deleted (prohibited)\n * @property {Date} deleted_at User deleted_at (prohibited)\n * @property {String} deleted_by User deleted_by (prohibited)\n * @property {Boolean} blocked User blocked (prohibited)\n * @property {Date} blocked_at User blocked_at (prohibited)\n * @property {String} blocked_by User blocked_by (prohibited)\n * @property {Date} last_login User last_login (prohibited)\n * @property {String} last_ip User last_ip (prohibited)\n * @property {String} created_by User record created by\n * @property {String} updated_by User record modified by\n * @description User holds record of all cities with school_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE, GENDER } from \"../../constants\";\nimport table from \"./table\";\nimport Notification from \"../notification/model\";\nimport Transaction from \"../transaction/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    type: Joi.string().valid([\"CUSTOMER\", \"ADMIN\"]).optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().valid([\"MALE\", \"FEMALE\"]).optional(),\n    phone: Joi.string().trim().optional(),\n    phone_personal: Joi.string().trim().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().trim().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    type: Joi.string().valid([\"CUSTOMER\", \"ADMIN\"]).optional(),\n    api_key: Joi.string().trim().optional(),\n    api_access: Joi.boolean().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().valid([\"MALE\", \"FEMALE\"]).optional(),\n    phone: Joi.string().trim().optional(),\n    phone_personal: Joi.string().trim().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().trim().optional(),\n    otp: Joi.string().trim().optional(),\n    otp_count: Joi.number().optional(),\n    otp_access: Joi.boolean().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    type: {\n        type: String,\n        enum: [\"CUSTOMER\", \"ADMIN\"],\n        trim: true,\n        uppercase: true,\n        required: true,\n        default: \"CUSTOMER\",\n    },\n    api_key: { type: String, trim: true, lowercase: true, unique: true },\n    api_access: { type: Boolean, default: false },\n    title: { type: String },\n    surname: { type: String, required: [false, \"Why no surname?\"] },\n    given_name: { type: String, required: [false, \"Why no given_name?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no offical phone?\"],\n        unique: true,\n        alias: \"phone_office\",\n    },\n    phone_personal: {\n        type: String,\n        required: [false, \"Why no personal phone?\"],\n        alias: \"phone_home\",\n    },\n    address: { type: String },\n    country_iso2: { type: String, required: [false, \"Why no input?\"], default: \"ng\" },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    password: { type: String },\n    confirmed_email: { type: Boolean, default: false },\n    confirmed_phone: { type: Boolean, default: false },\n    otp: { type: String },\n    otp_count: { type: Number, required: [false, \"Why no input?\"], default: 0 },\n    otp_access: { type: Boolean, default: false },\n    credit: { type: Number, default: 2.0 }, // SMS Unit\n    notifications: [{ type: ObjectId, ref: \"Notification\" }],\n    transactions: [{ type: ObjectId, ref: \"Transaction\" }],\n    remark: { type: String },\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    deleted_by: { type: ObjectId, ref: \"User\" },\n    blocked: { type: Boolean, default: false, required: true },\n    blocked_at: { type: Date },\n    blocked_by: { type: ObjectId, ref: \"User\" },\n    last_login: { type: Date },\n    last_ip: { type: String },\n    created_by: { type: ObjectId, ref: \"User\" },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\nnewSchema.set(\"collection\", \"user\");\n\nconst User = mongoose.model(\"User\", newSchema);\n\nUser.findOne({ email: \"nditah@gmail.com\" })\n    .then((user) => {\n        if (!user) {\n            console.log(table[ 0 ]);\n            const newRecord = new User(table[ 0 ]);\n            const newRecord2 = new User(table[ 1 ]);\n            newRecord.save();\n            newRecord2.save();\n        }\n    })\n    .catch(err => console.log(__dirname, err.message));\n\nif (preload) { User.insertMany(table); }\n\nexport default User;\n"]}