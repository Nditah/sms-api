{"version":3,"sources":["../../../src/api/bank/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","Joi","object","name","string","trim","required","sort_code","bank_code","country_iso2","optional","contact_person","website","created_by","schemaUpdate","updated_by","schema","type","String","unique","default","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Bank","model","insertMany","table"],"mappings":";;;;;;;AAYA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M,EAlBR;AACA;;;;;;;;;;;;IAkBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAeC,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EAD6B;AAEnCC,eAAWN,cAAIG,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EAFwB;AAGnCE,eAAWP,cAAIG,MAAJ,GAAaE,QAAb,EAHwB;AAInCG,kBAAcR,cAAIG,MAAJ,GAAaM,QAAb,EAJqB;AAKnCC,oBAAgBV,cAAIG,MAAJ,GAAaM,QAAb,EALmB;AAMnCE,aAASX,cAAIG,MAAJ,GAAaM,QAAb,EAN0B;AAOnCG,gBAAYZ,cAAIG,MAAJ,GAAaE,QAAb;AAPuB,CAAX,CAArB;;AAUA,IAAMQ,sCAAeb,cAAIC,MAAJ,CAAW;AACnCC,UAAMF,cAAIG,MAAJ,GAAaC,IAAb,GAAoBK,QAApB,EAD6B;AAEnCH,eAAWN,cAAIG,MAAJ,GAAaC,IAAb,GAAoBK,QAApB,EAFwB;AAGnCF,eAAWP,cAAIG,MAAJ,GAAaM,QAAb,EAHwB;AAInCD,kBAAcR,cAAIG,MAAJ,GAAaM,QAAb,EAJqB;AAKnCC,oBAAgBV,cAAIG,MAAJ,GAAaM,QAAb,EALmB;AAMnCE,aAASX,cAAIG,MAAJ,GAAaM,QAAb,EAN0B;AAOnCK,gBAAYd,cAAIG,MAAJ,GAAaE,QAAb;AAPuB,CAAX,CAArB;;AAUA,IAAMU,0BAAS;AAClBb,UAAM,EAAEc,MAAMC,MAAR,EAAgBZ,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAAmDa,QAAQ,IAA3D,EADY;AAElBZ,eAAW,EAAEU,MAAMC,MAAR,EAAgBZ,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAFO;AAGlBE,eAAW,EAAES,MAAMC,MAAR,EAAgBZ,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAHO;AAIlBG,kBAAc,EAAEQ,MAAMC,MAAR,EAAgBZ,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAAmDc,SAAS,IAA5D,EAJI;AAKlBT,oBAAgB,EAAEM,MAAMC,MAAR,EALE;AAMlBN,aAAS,EAAEK,MAAMC,MAAR,EANS;AAOlBL,gBAAY,EAAEI,MAAMnB,QAAR,EAAkBQ,UAAU,IAA5B,EAAkCe,KAAK,MAAvC,EAPM;AAQlBN,gBAAY,EAAEE,MAAMnB,QAAR,EAAkBuB,KAAK,MAAvB;AARM,CAAf;;AAWP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAIhC,MAAJ,CAAWoB,MAAX,EAAmBU,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,MAA5B;;AAEA,IAAMC,OAAOjC,mBAASkC,KAAT,CAAe,MAAf,EAAuBH,SAAvB,CAAb;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,SAAKE,UAAL,CAAgBC,eAAhB;AAAyB;;kBAEzBH,I","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {Number} id bank primaryKey\n * @property {String} name Bank full name (required)\n * @property {String} sort_code Bank sort_code (required)\n * @property {String} bank_code Bank bank_code (required)\n * @property {String} country_iso2 Bank country_iso2 (optional)\n * @property {String} contact_person Bank contact_person (optional)\n * @property {String} website Bank website (optional)\n * @description Bank model holds record of all banks the company deals with\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = Joi.object({\n    name: Joi.string().trim().required(),\n    sort_code: Joi.string().trim().required(),\n    bank_code: Joi.string().required(),\n    country_iso2: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    website: Joi.string().optional(),\n    created_by: Joi.string().required(),\n});\n\nexport const schemaUpdate = Joi.object({\n    name: Joi.string().trim().optional(),\n    sort_code: Joi.string().trim().optional(),\n    bank_code: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    website: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no input?\"], unique: true },\n    sort_code: { type: String, required: [true, \"Why no input?\"] },\n    bank_code: { type: String, required: [true, \"Why no input?\"] },\n    country_iso2: { type: String, required: [true, \"Why no input?\"], default: \"ng\" },\n    contact_person: { type: String },\n    website: { type: String },\n    created_by: { type: ObjectId, required: true, ref: \"User\" },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"bank\");\n\nconst Bank = mongoose.model(\"Bank\", newSchema);\n\nif (preload) { Bank.insertMany(table); }\n\nexport default Bank;\n"]}