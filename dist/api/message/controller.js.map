{"version":3,"sources":["../../../src/api/message/controller.js"],"names":["query","filter","skip","limit","sort","projection","Message","find","populate","select","exec","result","getMessage","req","res","logger","info","error","message","fetchRecord","data","body","code","user","created_by","schemaCreate","validate","myArray","recipient","box","newRecord","sender","subject","sendToSelf","sendToRecipient","save","newRecord2","result2","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, genCode, stringToArrayEmail } from \"../../lib\";\nimport { sendEmail } from \"../../services\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function getMessage(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Message.find(filter)\n        .populate(\"created_by\", \"id phone email credit\")\n        .populate(\"updated_by\", \"id phone email credit\")\n        .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const result = getMessage(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    data.code = genCode(32);\n    data.user = data.created_by;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const myArray = stringToArrayEmail(data.recipient) || [];\n\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        const sendToSelf = await sendEmail(sender, sender, subject, body);\n        const sendToRecipient = await sendEmail(recipient, sender, subject, body);\n        const result = await newRecord.save();\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        if (!result) {\n            logger.error(\"Operation failed\", sendToSelf, sendToRecipient, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Message.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}