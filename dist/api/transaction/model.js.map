{"version":3,"sources":["../../../src/api/transaction/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","customer","Joi","string","required","amount","number","code","trim","gateway_details","object","optional","sms_units","payment_method","valid","Object","values","PAYMENT","METHOD","payment_gateway","GATEWAY","payment_status","STATUS","description","created_by","schemaUpdate","credit_status","updated_by","schema","type","ref","Number","String","alias","uppercase","unique","id","charged_amount","accountId","customerId","currency","enum","default","CASH","FLUTTERWAVE","PENDING","options","DATABASE","OPTIONS","newSchema","set","Transaction","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} customer transaction reference txRef (required)\n * @property {Number} amount Transaction amount paid (required)\n * @property {String} code transaction reference txRef (required)\n * @property {String} gateway_details transaction response Object (required)\n * @property {Number} sms_units Transaction sms_units (required)\n * @property {String} payment_method Transaction payment method GATEWAY (required)\n * @property {String} payment_gateway Transaction payment gateway FLUTTERWAVE (required)\n * @property {String} payment_status Transaction transaction status (prohibited)\n * @property {String} description Transaction description(optional)\n * @property {String} credit_status Transaction credit status (prohibited)\n * @description Transaction model holds record of all banks transactions records\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE, PAYMENT } from \"../../constants\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    customer: Joi.string().required(),\n    amount: Joi.number().required(),\n    code: Joi.string().trim().required(),\n    gateway_details: Joi.object().optional(),\n    sms_units: Joi.number().required(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).required(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).required(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).required(),\n    description: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    customer: Joi.string().optional(),\n    amount: Joi.number().optional(),\n    code: Joi.string().trim().optional(),\n    gateway_details: Joi.object().optional(),\n    sms_units: Joi.number().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).optional(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).optional(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).optional(),\n    description: Joi.string().optional(),\n    credit_status: Joi.string().valid([\"PENDING\", \"CREDITED\", \"REJECTED\"]).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    customer: { type: ObjectId, required: true, ref: \"User\" },\n    amount: { type: Number, required: [true, \"Why no amount?\"] },\n    code: { type: String, alias: \"trxref\", uppercase: true, unique: true, required: true },\n    gateway_details: {\n        id: { type: Number },\n        charged_amount: { type: Number },\n        accountId: { type: Number },\n        customerId: { type: Number },\n        currency: { type: String },\n    },\n    sms_units: { type: Number, required: [true, \"Why no sms units?\"] },\n    payment_method: {\n        type: String,\n        enum: Object.values(PAYMENT.METHOD),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.METHOD.CASH,\n    },\n    payment_gateway: {\n        type: String,\n        enum: Object.values(PAYMENT.GATEWAY),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.GATEWAY.FLUTTERWAVE,\n    },\n    payment_status: {\n        type: String,\n        enum: Object.values(PAYMENT.STATUS),\n        required: [true, \"Why no payment_status?\"],\n        default: PAYMENT.STATUS.PENDING,\n    },\n    description: { type: String },\n    credit_status: {\n        type: String,\n        enum: [\"PENDING\", \"CREDITED\", \"REJECTED\"],\n        required: [true, \"Why no credit_status?\"],\n        default: \"PENDING\",\n    },\n    created_by: { type: ObjectId, ref: \"User\", required: true },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"transaction\");\n\nconst Transaction = mongoose.model(\"Transaction\", newSchema);\n\nexport default Transaction;\n"]}