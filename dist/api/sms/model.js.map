{"version":3,"sources":["../../../src/api/sms/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","sid","Joi","string","optional","code","email","password","sender","sender_as","recipient","required","message","created_by","schema","type","String","default","SMS","SENDER","direction","enum","delivery_status","ref","options","DATABASE","OPTIONS","newSchema","set","Sms","model"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AACA;;AACA;;;;;;AAdA;;;;;;;;;;;IAgBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,SAAKC,cAAIC,MAAJ,GAAaC,QAAb,EADmB;AAExBC,UAAMH,cAAIC,MAAJ,GAAaC,QAAb,EAFkB;AAGxBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHiB;AAIxBG,cAAUL,cAAIC,MAAJ,GAAaC,QAAb,EAJc;AAKxBI,YAAQN,cAAIC,MAAJ,GAAaC,QAAb,EALgB;AAMxBK,eAAWP,cAAIC,MAAJ,GAAaC,QAAb,EANa;AAOxBM,eAAWR,cAAIC,MAAJ,GAAaQ,QAAb,EAPa;AAQxBC,aAASV,cAAIC,MAAJ,GAAaQ,QAAb,EARe;AASxBE,gBAAYX,cAAIC,MAAJ,GAAaQ,QAAb;AATY,CAArB;;AAYA,IAAMG,0BAAS;AAClBb,SAAK,EAAEc,MAAMC,MAAR,EADa;AAElBR,YAAQ,EAAEO,MAAMC,MAAR,EAAgBL,UAAU,IAA1B,EAAgCM,SAASC,eAAIC,MAA7C,EAFU,EAE6C;AAC/DV,eAAW,EAAEM,MAAMC,MAAR,EAAgBC,SAASC,eAAIC,MAA7B,EAHO,EAGgC;AAClDT,eAAW,EAAEK,MAAMC,MAAR,EAAgBL,UAAU,IAA1B,EAJO,EAI2B;AAC7CC,aAAS,EAAEG,MAAMC,MAAR,EAAgBL,UAAU,IAA1B,EALS;AAMlBS,eAAW,EAAEL,MAAMC,MAAR,EAAgBK,MAAM,CAAC,SAAD,EAAY,UAAZ,CAAtB,EAA+CJ,SAAS,UAAxD,EANO;AAOlBK,qBAAiB,EAAEP,MAAMC,MAAR,EAPC;AAQlBH,gBAAY,EAAEE,MAAMjB,QAAR,EAAkByB,KAAK,MAAvB,EAA+BZ,UAAU,IAAzC;AARM,CAAf;;AAWP,IAAMa,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI/B,MAAJ,CAAWkB,MAAX,EAAmBU,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,KAA5B;;AAEA,IAAMC,MAAMhC,mBAASiC,KAAT,CAAe,KAAf,EAAsBH,SAAtB,CAAZ;;kBAEeE,G","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Sms primaryKey\n * @property {String} sender Sms registered sending phone\n * @property {String} sender_as Sms sender's name or phone\n * @property {String} recipient Sms recipient phone\n * @property {String} message Sms message\n * @property {String} direction Sms direction INBOUND|OUTBOUND\n * @property {String} delivery_status Sms delivery status: queued|failed|sent|delivered|undelivered\n * @description Sms model holds record of all internal and external sms via ERP\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE, SMS } from \"../../constants\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    sid: Joi.string().optional(),\n    code: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    sender: Joi.string().optional(),\n    sender_as: Joi.string().optional(),\n    recipient: Joi.string().required(),\n    message: Joi.string().required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schema = {\n    sid: { type: String },\n    sender: { type: String, required: true, default: SMS.SENDER }, // Phone\n    sender_as: { type: String, default: SMS.SENDER }, // Sender's name\n    recipient: { type: String, required: true }, // Phones\n    message: { type: String, required: true },\n    direction: { type: String, enum: [\"INBOUND\", \"OUTBOUND\"], default: \"OUTBOUND\" },\n    delivery_status: { type: String },\n    created_by: { type: ObjectId, ref: \"User\", required: true },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"sms\");\n\nconst Sms = mongoose.model(\"Sms\", newSchema);\n\nexport default Sms;\n"]}