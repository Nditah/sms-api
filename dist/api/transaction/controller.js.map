{"version":3,"sources":["../../../src/api/transaction/controller.js"],"names":["query","filter","skip","limit","sort","projection","Transaction","find","populate","select","exec","result","getTransaction","req","res","logger","info","error","message","fetchRecord","data","body","schemaCreate","validate","newRecord","save","User","update","_id","user","$push","transactions","result2","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Transaction, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[transaction]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/transaction.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function getTransaction(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Transaction.find(filter)\n        .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const result = getTransaction(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = schemaCreate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Transaction(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"SUCCESS\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $push: { transactions: result._id } }).exec();\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = schemaUpdate.validate(data);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Transaction.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Transaction.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result2 = await User.update({ _id: result.user._id },\n            { $pull: { transactions: result._id } }).exec();\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}