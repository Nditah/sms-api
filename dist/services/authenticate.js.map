{"version":3,"sources":["../../src/services/authenticate.js"],"names":["loginPayload","email","phone","password","type","user","token","User","findOne","$or","exec","Error","bcryptjs","compareSync","payload","id","time","Date","jwt","sign","JWT","jwtSecret","expiresIn","tokenExpireTime","message","userAuthenticate2","userAuthenticate","console","log","then","catch","err"],"mappings":";;;;;;;AAyBA;;uEACO,iBAAiCA,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACQC,6BAFL,GAEsCD,YAFtC,CAEKC,KAFL,EAEYC,KAFZ,GAEsCF,YAFtC,CAEYE,KAFZ,EAEmBC,QAFnB,GAEsCH,YAFtC,CAEmBG,QAFnB,EAE6BC,IAF7B,GAEsCJ,YAFtC,CAE6BI,IAF7B;AAGCC,4BAHD;AAICC,6BAJD;AAAA;AAAA;AAMQ,+BAAMC,gBAAKC,OAAL,CAAa,EAAEC,KAAK,CAAC,EAAER,YAAF,EAAD,EAAY,EAAEC,YAAF,EAAZ,CAAP,EAAb,EAA8CQ,IAA9C,EAAN;;AANR;AAMCL,4BAND;;AAAA,4BAOMA,IAPN;AAAA;AAAA;AAAA;;AAAA,8BAQW,IAAIM,KAAJ,CAAU,iBAAV,CARX;;AAAA;AAAA,4BAUOC,mBAASC,WAAT,CAAqBV,YAAY,EAAjC,EAAqCE,KAAKF,QAA1C,CAVP;AAAA;AAAA;AAAA;;AAAA,8BAWW,IAAIQ,KAAJ,CAAU,oBAAV,CAXX;;AAAA;AAaC;AACAN,6BAAKF,QAAL,GAAgB,IAAhB;AACMW,+BAfP,GAeiB,EAAEC,IAAIV,KAAKU,EAAX,EAAeX,UAAf,EAAqBH,YAArB,EAA4BC,YAA5B,EAAmCc,MAAM,IAAIC,IAAJ,EAAzC,EAfjB;;AAgBCX,gCAAQY,uBAAIC,IAAJ,CAASL,OAAT,EAAkBM,eAAIC,SAAtB,EAAiC,EAAEC,WAAWF,eAAIG,eAAjB,EAAjC,CAAR;AAhBD;AAAA;;AAAA;AAAA;AAAA;AAAA,8BAkBO,IAAIZ,KAAJ,4BAAmC,YAAIa,OAAvC,CAlBP;;AAAA;AAAA,yDAoBI,EAAElB,YAAF,EAASD,UAAT,EApBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeoB,iB;;;;;QArBNC,gB,GAAAA,gB;;AALhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,SAASA,gBAAT,CAA0B1B,YAA1B,EAAwC;AAC3C2B,YAAQC,GAAR,CAAY5B,YAAZ;AAD2C,QAEnCC,KAFmC,GAERD,YAFQ,CAEnCC,KAFmC;AAAA,QAE5BC,KAF4B,GAERF,YAFQ,CAE5BE,KAF4B;AAAA,QAErBC,QAFqB,GAERH,YAFQ,CAErBG,QAFqB;;AAG3C,WAAOI,gBAAKC,OAAL,CAAa,EAAEC,KAAK,CAAC,EAAER,YAAF,EAAD,EAAY,EAAEC,YAAF,EAAZ,CAAP,EAAb;AACH;AADG,KAEF2B,IAFE,CAEG,UAACxB,IAAD,EAAU;AACZ,YAAI,CAACA,IAAL,EAAW;AAAE,kBAAM,IAAIM,KAAJ,CAAU,iBAAV,CAAN;AAAqC;AAClD,YAAI,CAAEC,mBAASC,WAAT,CAAqBV,YAAY,EAAjC,EAAqCE,KAAKF,QAA1C,CAAN,EAA4D;AACxD,kBAAM,IAAIQ,KAAJ,CAAU,iBAAV,CAAN;AACH;AACD;AACAN,aAAKF,QAAL,GAAgB,IAAhB;AACA,YAAMW,UAAU,EAAEC,IAAIV,KAAKU,EAAX,EAAeX,MAAMC,KAAKD,IAA1B,EAAgCH,YAAhC,EAAuCC,YAAvC,EAAhB;AACA,YAAMI,QAAQY,uBAAIC,IAAJ,CAASL,OAAT,EAAkBM,eAAIC,SAAtB,CAAd;AACA,eAAO,EAAEf,YAAF,EAASD,UAAT,EAAP;AACH,KAZE,EAYAyB,KAZA,CAYM,UAACC,GAAD,EAAS;AACd,cAAM,IAAIpB,KAAJ,CAAUoB,IAAIP,OAAd,CAAN;AACH,KAdE,CAAP;AAeH","file":"authenticate.js","sourcesContent":["import bcryptjs from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"../api/user/model\";\nimport { JWT } from \"../constants\";\n\nexport function userAuthenticate(loginPayload) {\n    console.log(loginPayload);\n    const { email, phone, password } = loginPayload;\n    return User.findOne({ $or: [{ email }, { phone }] })\n        // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"User not found.\"); }\n            if (!(bcryptjs.compareSync(password || \"\", user.password))) {\n                throw new Error(\"Wrong password.\");\n            }\n            // Delete private attributes\n            user.password = null;\n            const payload = { id: user.id, type: user.type, email, phone };\n            const token = jwt.sign(payload, JWT.jwtSecret);\n            return { token, user };\n        }).catch((err) => {\n            throw new Error(err.message);\n        });\n}\n\n// eslint-disable-next-line complexity\nexport async function userAuthenticate2(loginPayload) {\n    // return next();\n    const { email, phone, password, type } = loginPayload;\n    let user;\n    let token;\n    try {\n        user = await User.findOne({ $or: [{ email }, { phone }] }).exec();\n        if (!user) {\n            throw new Error(\"User not found.\");\n        }\n        if (!(bcryptjs.compareSync(password || \"\", user.password))) {\n            throw new Error(\"Wrong credentials.\");\n        }\n        // Delete private attributes\n        user.password = null;\n        const payload = { id: user.id, type, email, phone, time: new Date() };\n        token = jwt.sign(payload, JWT.jwtSecret, { expiresIn: JWT.tokenExpireTime });\n    } catch (err) {\n        throw new Error(`Authentication failed ${err.message}`);\n    }\n    return { token, user };\n}\n"]}