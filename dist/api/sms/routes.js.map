{"version":3,"sources":["../../../src/api/sms/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","createOtp","createWebhook"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,MAAX,EAAmB,CAACC,wBAAD,EAAYC,0BAAZ,CAAnB,EAA6CC,uBAA7C;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAN,OAAOO,IAAP,CAAY,MAAZ,EAAoB,CAACH,wBAAD,EAAYC,0BAAZ,CAApB,EAA8CG,wBAA9C;AACAR,OAAOG,GAAP,CAAW,MAAX,EAAmB,CAACC,wBAAD,EAAYC,0BAAZ,CAAnB,EAA6CG,wBAA7C;;AAEA;;;;;;;;;;AAUAR,OAAOO,IAAP,CAAY,UAAZ,EAAwBE,qBAAxB;;AAEA;;;;;;;;;;;;;;;AAeAT,OAAOO,IAAP,CAAY,cAAZ,EAA4BG,yBAA5B;;kBAEeV,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidUser } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, createWebhook, createOtp } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/sms?id={recordId} Retrieve SMS records\n * @apiName RetrieveSms\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/sms?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/sms\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/v1/sms Create an SMS record\n * @apiName CreateSms\n * @apiGroup Sms\n * @apiExample {curl} Example usage for sending sms externally:\n *      curl -i api/v1/sms?code=abc123&email=somebody@example.com&\n *         password=secret&recipient=+10000123&message=hello world sms\n * @apiParam {String} sender Sms registered sending phone\n * @apiParam {String} sender_as Sms sender's name or phone\n * @apiParam {String} code Sms customer ApiKey  (required)\n * @apiParam {String} email Sms customer email  (required)\n * @apiParam {String} password Sms customer password  (required)\n * @apiParam {String} recipient Sms recipient(s) phone with\n * comma-separated list for multiple phone numbers as recipient(s)  (required)\n * @apiParam {String} message Sms message  (required)\n * @apiDescription code or email & password is sent for authentication.\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 master access only.\n */\nrouter.post(\"/sms\", [checkAuth, isValidUser], createRecord);\nrouter.get(\"/sms\", [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {post} /api/v1/sms/otp Create send SMS otp\n * @apiName CreateSmsOtp\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} phone Registered user (office) phone number\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Sms not found.\n */\nrouter.post(\"/sms/otp\", createOtp);\n\n/**\n * @api {post} /api/v1/sms/webhook Create incoming SMS webhook\n * @apiName CreateSmsWebhook\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} sender Sms registered sending phone\n * @apiParam {String} sender_as Sms sender's name or phone\n * @apiParam {String} recipient Sms recipient phone number\n * @apiParam {String} message Sms message\n * @apiParam {String} direction Sms direction INBOUND|OUTBOUND\n * @apiParam {String} delivery_status Sms delivery status: queued|failed|sent|delivered|undelivered\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 401 master access only.\n */\nrouter.post(\"/sms/webhook\", createWebhook);\n\nexport default router;\n"]}