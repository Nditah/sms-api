{"version":3,"sources":["../../../src/api/user/routes.js"],"names":["router","express","Router","get","checkAuth","isValidUser","fetchRecord","post","createRecord","put","updateRecord","delete","isValidAdmin","deleteRecord","login"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,0BAAZ,CAArB,EAA+CC,uBAA/C;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,0BAAZ,CAAtB,EAAgDG,wBAAhD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,0BAAZ,CAA/B,EAAyDK,wBAAzD;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYQ,2BAAZ,CAAlC,EAA6DC,wBAA7D;;AAEA;;;;;;;;;;;;AAYAb,OAAOO,IAAP,CAAY,cAAZ,EAA4BO,iBAA5B;;kBAEed,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidUser, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/users?id={recordId} Retrieve User records\n * @apiName RetrieveUser\n * @apiGroup User\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/users?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of user distributed across schools.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/users\", [checkAuth, isValidUser], fetchRecord);\n\n/**\n * @api {post} /api/v1/users Create a User record\n * @apiName CreateUser\n * @apiGroup User\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type User type (optional)\n * @apiParam {String} api_key User api_key (prohibited)\n * @apiParam {Boolean} api_access User api_access (optional)\n * @apiParam {String} title User title (optional)\n * @apiParam {String} surname User surname (required)\n * @apiParam {String} given_name User given_name (required)\n * @apiParam {String} gender User gender (required)\n * @apiParam {String} phone User office phone (required)\n * @apiParam {String} phone_personal User phone_personal (optional)\n * @apiParam {String} address User address (optional)\n * @apiParam {String} country_iso2 User country_iso2 (optional)\n * @apiParam {String} email User email (optional)\n * @apiParam {String} password User password (optional)\n * @apiParam {String} otp User otp (optional)\n * @apiParam {Number} otp_count User otp_count (optional)\n * @apiParam {Boolean} otp_access User otp_access (optional)\n * @apiParam {Number} credit User credit (prohibited)\n * @apiParam {Array} notifications User notifications (optional)\n * @apiParam {String} remark User remark (optional)\n * @apiParam {Boolean} deleted User deleted (prohibited)\n * @apiParam {Date} deleted_at User deleted_at (prohibited)\n * @apiParam {String} deleted_by User deleted_by (prohibited)\n * @apiParam {Boolean} blocked User blocked (prohibited)\n * @apiParam {Date} blocked_at User blocked_at (prohibited)\n * @apiParam {String} blocked_by User blocked_by (prohibited)\n * @apiParam {Date} last_login User last_login (prohibited)\n * @apiParam {String} last_ip User last_ip (prohibited)\n * @apiSuccess {Object} User User's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 User not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/users\", [checkAuth, isValidUser], createRecord);\n\n/**\n * @api {put} /api/v1/users/{recordId} Update a User record\n * @apiName UpdateUser\n * @apiGroup User\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} type User type (optional)\n * @apiParam {String} api_key User api_key (prohibited)\n * @apiParam {Boolean} api_access User api_access (prohibited)\n * @apiParam {String} title User title (optional)\n * @apiParam {String} surname User surname (required)\n * @apiParam {String} given_name User given_name (required)\n * @apiParam {String} gender User gender (required)\n * @apiParam {String} phone User office phone (required)\n * @apiParam {String} phone_personal User phone_personal (optional)\n * @apiParam {String} address User address (optional)\n * @apiParam {String} country_iso2 User country_iso2 (optional)\n * @apiParam {String} email User email (optional)\n * @apiParam {String} password User password (optional)\n * @apiParam {String} otp User otp (optional)\n * @apiParam {Number} otp_count User otp_count (optional)\n * @apiParam {Boolean} otp_access User otp_access (optional)\n * @apiParam {Number} credit User credit (prohibited)\n * @apiParam {Array} notifications User notifications (optional)\n * @apiParam {String} remark User remark (optional)\n * @apiParam {Boolean} deleted User deleted (prohibited)\n * @apiParam {Date} deleted_at User deleted_at (prohibited)\n * @apiParam {String} deleted_by User deleted_by (prohibited)\n * @apiParam {Boolean} blocked User blocked (prohibited)\n * @apiParam {Date} blocked_at User blocked_at (prohibited)\n * @apiParam {String} blocked_by User blocked_by (prohibited)\n * @apiParam {Date} last_login User last_login (prohibited)\n * @apiParam {String} last_ip User last_ip (prohibited)\n * @apiSuccess {Object} User User's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 User not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/users/:recordId\", [checkAuth, isValidUser], updateRecord);\n\n/**\n * @api {delete} /api/v1/users/{recordId} Delete a User record\n * @apiName DeleteUser\n * @apiGroup User\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 User not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/users/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\n/**\n * @api {post} /api/v1/users/login Login User\n * @apiName LoginUser\n * @apiGroup User\n * @apiParam {String} email User email address (optional)\n * @apiParam {String} password User password (optional)\n * @apiParam {String} phone User official phone number (optional)\n * @apiParam {String} otp User One-Time-Password sent to phone (optional)\n * @apiParam {String} type Login type \"EMAIL\", \"PHONE\", \"OTP\" (required)\n * @apiSuccess (Success 200) 200 Login Successful.\n * @apiError 404 User not found.\n */\nrouter.post(\"/users/login\", login);\n\nexport default router;\n"]}