{"version":3,"sources":["../../../src/api/sms/controller.js"],"names":["query","filter","skip","limit","sort","projection","Sms","find","populate","select","exec","result","getSms","req","res","logger","info","error","message","fetchRecord","otp","toString","phone","body","send","sid","record","recipient","direction","newRecord","save","result1","console","log","update","otp_access","$inc","otp_count","User","findOneAndUpdate","new","to","createOtp","data","method","recipientArray","Joi","validate","schemaCreate","myArray","sendingSms","length","credit","Promise","all","map","resolvedFinalArray","_id","created_by","result2","createRecord","createWebhook","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Sms, { schemaCreate } from \"./model\";\nimport { success, fail, notFound, generateOtp, hash, stringToArrayPhone } from \"../../lib\";\nimport { receiveSms, sendSmsAsync } from \"../../services\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[sms]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/sms.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function getSms(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Sms.find(filter)\n        .populate(\"user\", \"id phone email credit\")\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const result = getSms(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createOtp(req, res) {\n    let otp = generateOtp().toString();\n    const { phone } = req.body;\n    if (!phone) fail(res, 422, \"Error invalid phone\");\n\n    try {\n        const send = await sendSmsAsync(phone, otp);\n        const { sid } = send;\n        if (!sid) return fail(res, 422, \"Error sending message\");\n        otp = hash(otp);\n        const record = { recipient: phone, message: otp, sid, direction: \"OUTBOUND\" };\n        const newRecord = new Sms(record);\n        const result1 = await newRecord.save();\n        console.log(result1);\n        const query = { phone };\n        const update = { otp, otp_access: true, $inc: { otp_count: 1 } };\n        const result = await User.findOneAndUpdate(query, update, { new: true });\n\n        if (!result) {\n            logger.info(\"Operation was successful\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, send.to, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    let data = {};\n    if (req.method === \"POST\") {\n        data = req.body;\n    } else {\n        data = req.query;\n    }\n    const { recipient: recipientArray } = data;\n    try {\n        const { error } = Joi.validate(data, schemaCreate);\n        if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n        const myArray = stringToArrayPhone(recipientArray) || [];\n        const sendingSms = myArray.length;\n        if (sendingSms > data.credit) {\n            return fail(res, 422, `Error! You have ${data.credit} units left. You cannot send ${sendingSms} sms`);\n            // console.log(`You have ${user.sms_units}Units left. You cannot send ${sendingSms}`);\n        }\n        const resolvedFinalArray = await Promise.all(myArray.map(async (phone) => {\n            const send = await sendSmsAsync(phone, data.message);\n            logger.error(send);\n            data.sid = send.sid;\n            data.recipient = phone;\n            const newRecord = new Sms(data);\n            const result = await newRecord.save();\n            return result; // important to return the value\n        }));\n\n        const result2 = await User.findOneAndUpdate({ _id: data.created_by },\n            { $inc: { credit: -sendingSms } }, { new: true });\n        return success(res, 201, resolvedFinalArray, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function createWebhook(req, res) {\n    const data = req.body;\n    receiveSms(req, res);\n    logger.info(\"Operation was successful\", data);\n}\n"]}