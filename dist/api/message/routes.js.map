{"version":3,"sources":["../../../src/api/message/routes.js"],"names":["router","express","Router","get","checkAuth","isValidAdmin","fetchRecord","post","createRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,uBAAnD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,wBAApD;;AAEA;;;;;;;;;;AAUAR,OAAOS,MAAP,CAAc,qBAAd,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,wBAAhE;;kBAEeV,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/messages?id={recordId} Retrieve one or all records\n * @apiName RetrieveMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/messages?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/messages\", [checkAuth, isValidAdmin], fetchRecord);\n\n/**\n * @api {post} /api/v1/messages Create messages\n * @apiName CreateMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recipient Message recipient user\n * @apiParam {String} subject Message subject\n * @apiParam {String} body Message body\n * @apiParam {String} receive_status Message receive_status\n * @apiParam {String} sent_status Message sent_status\n * @apiSuccess {Object} Message Message's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Message not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/messages\", [checkAuth, isValidAdmin], createRecord);\n\n/**\n * @api {delete} /api/v1/messages/{recordId} Delete messages\n * @apiName DeleteMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Message not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/messages/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\nexport default router;\n"]}