{"version":3,"sources":["../../../src/api/setup/controller.js"],"names":["req","res","result","getCollection","accessToken","results","console","log","options","uri","setupUrls","method","auth","bearer","headers","json","Promise","all","map","setupUrl","message","setupSystem","params","module","collection","model","tablePath","path","join","__dirname","table","require","default","Setting","User","Bank","insertMany","logger","info","error","setCollection","log4js","getLogger","configure","appenders","file","type","filename","categories","level","host","process","env","NODE_ENV","SERVER_DEV","SERVER_PROD"],"mappings":"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","file":"controller.js","sourcesContent":["/* eslint-disable global-require */\n/* eslint-disable complexity */\nimport log4js from \"log4js\";\nimport path from \"path\";\nimport rp from \"request-promise\";\n\nimport User from \"../user/model\";\nimport Setting from \"../setting/model\";\nimport Bank from \"../bank/model\";\nimport { success, fail, notFound } from \"../../lib\";\n\nimport { getToken } from \"../../middleware/authorization\";\n\n// Logging\nconst logger = log4js.getLogger(\"[setup]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/setup.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nlet host;\nif (process.env.NODE_ENV === \"development\") {\n    host = process.env.SERVER_DEV;\n} else {\n    host = process.env.SERVER_PROD;\n}\n\nconst setupUrls = [\n    // `${host}/api/setups/preload/{folder}/{collection}`,\n    `${host}/api/setups/preload/user/user`,\n    `${host}/api/setups/preload/setting/setting`,\n    `${host}/api/setups/preload/bank/bank`,\n];\n\nexport async function getCollection(req, res) {\n    const result = [\n        \"user\",\n        \"setting\",\n        \"bank\",\n    ];\n    return success(res, 201, result, \"Valid setup collections!\");\n}\n\nexport async function setupSystem(req, res) {\n    const accessToken = getToken(req);\n    let results;\n    console.log(\"\\nThis is token \\n\\n\\n\", accessToken);\n\n    const options = {\n        uri: setupUrls[ 0 ],\n        method: \"GET\",\n        auth: { bearer: accessToken },\n        headers: { \"User-Agent\": \"Request-Promise\" },\n        json: true,\n    };\n    try {\n        // results = await rp(options);\n        results = await Promise.all(setupUrls.map((setupUrl) => {\n            options.uri = setupUrl;\n            return rp(options);\n        }));\n    } catch (err) {\n        console.log(err.message);\n        return fail(res, 401, `Error settingup system ${err.message}`);\n    }\n    return success(res, 201, results, \"System Setup complete!\");\n}\n\nexport async function setCollection(req, res) {\n    const { module, collection } = req.params;\n    let model;\n    const tablePath = path.join(__dirname, `../${module}/table`);\n    // eslint-disable-next-line import/no-dynamic-require\n    const table = require(`${tablePath}`).default;\n    console.log(table);\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n        case \"setting\": model = Setting; break;\n        case \"user\": model = User; delete table[ 0 ]; break;\n        case \"bank\": model = Bank; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        const result = await model.insertMany(table);\n        if (!result) {\n            logger.info(\"Operation was successful\", []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n"]}