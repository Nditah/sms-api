{"version":3,"sources":["../../../src/api/message/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","recipient","Joi","string","optional","subject","required","body","receive_status","valid","sent_status","created_by","schemaUpdated","updated_by","schema","type","ref","String","box","enum","default","alias","options","DATABASE","OPTIONS","newSchema","set","Message","model"],"mappings":";;;;;;;AAYA;;;;AACA;;;;AACA;;AACA;;;;;;AAfA;;;;;;;;;;;;IAiBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,eAAWC,cAAIC,MAAJ,GAAaC,QAAb,EADa;AAExBC,aAASH,cAAIC,MAAJ,GAAaG,QAAb,EAFe;AAGxBC,UAAML,cAAIC,MAAJ,GAAaG,QAAb,EAHkB;AAIxBE,oBAAgBN,cAAIC,MAAJ,GAAaM,KAAb,CAAmB,QAAnB,EAA6B,MAA7B,EAAqCL,QAArC,EAJQ;AAKxBM,iBAAaR,cAAIC,MAAJ,GAAaM,KAAb,CAAmB,OAAnB,EAA4B,MAA5B,EAAoCL,QAApC,EALW;AAMxBO,gBAAYT,cAAIC,MAAJ,GAAaG,QAAb;AANY,CAArB;;AASA,IAAMM,wCAAgB;AACzBJ,oBAAgBN,cAAIC,MAAJ,GAAaM,KAAb,CAAmB,QAAnB,EAA6B,MAA7B,EAAqCL,QAArC,EADS;AAEzBM,iBAAaR,cAAIC,MAAJ,GAAaM,KAAb,CAAmB,OAAnB,EAA4B,MAA5B,EAAoCL,QAApC,EAFY;AAGzBS,gBAAYX,cAAIC,MAAJ,GAAaG,QAAb;AAHa,CAAtB;;AAMA,IAAMQ,0BAAS;AAClBb,eAAW,EAAEc,MAAMjB,QAAR,EAAkBkB,KAAK,MAAvB,EADO;AAElBX,aAAS,EAAEU,MAAME,MAAR,EAAgBX,UAAU,IAA1B,EAFS;AAGlBC,UAAM,EAAEQ,MAAME,MAAR,EAAgBX,UAAU,IAA1B,EAHY;AAIlBY,SAAK,EAAEH,MAAME,MAAR,EAAgBE,MAAM,CAAC,OAAD,EAAU,QAAV,CAAtB,EAA2Cb,UAAU,IAArD,EAJa;AAKlBE,oBAAgB,EAAEO,MAAME,MAAR,EAAgBE,MAAM,CAAC,QAAD,EAAW,MAAX,CAAtB,EAA0Cb,UAAU,IAApD,EAA0Dc,SAAS,QAAnE,EALE;AAMlBV,iBAAa,EAAEK,MAAME,MAAR,EAAgBE,MAAM,CAAC,OAAD,EAAU,MAAV,CAAtB,EAAyCb,UAAU,IAAnD,EAAyDc,SAAS,OAAlE,EANK;AAOlBT,gBAAY,EAAEI,MAAMjB,QAAR,EAAkBkB,KAAK,MAAvB,EAA+BK,OAAO,QAAtC,EAAgDf,UAAU,IAA1D,EAPM,EAO4D;AAC9EO,gBAAY,EAAEE,MAAMjB,QAAR,EAAkBkB,KAAK,MAAvB;AARM,CAAf;;AAWP,IAAMM,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWkB,MAAX,EAAmBQ,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,SAA5B;;AAEA,IAAMC,UAAU9B,mBAAS+B,KAAT,CAAe,SAAf,EAA0BH,SAA1B,CAAhB;;kBAEeE,O","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Message primaryKey\n * @property {ObjectId} recipient Message recipient user id\n * @property {String} subject Message subject\n * @property {String} body Message body\n * @property {String} receive_status Message receive_status\n * @property {String} sent_status Message sent_status\n * @description Message model holds record of all internal mails between user\n * For multiple recepient, a record is created for each to enable tracking of\n * individual status\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    recipient: Joi.string().optional(),\n    subject: Joi.string().required(),\n    body: Joi.string().required(),\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdated = {\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    recipient: { type: ObjectId, ref: \"User\" },\n    subject: { type: String, required: true },\n    body: { type: String, required: true },\n    box: { type: String, enum: [\"INBOX\", \"OUTBOX\"], required: true },\n    receive_status: { type: String, enum: [\"UNREAD\", \"READ\"], required: true, default: \"UNREAD\" },\n    sent_status: { type: String, enum: [\"DRAFT\", \"SENT\"], required: true, default: \"DRAFT\" },\n    created_by: { type: ObjectId, ref: \"User\", alias: \"sender\", required: true }, // Sender\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"message\");\n\nconst Message = mongoose.model(\"Message\", newSchema);\n\nexport default Message;\n"]}