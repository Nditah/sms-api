{"version":3,"sources":["../../../src/api/message/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Message","find","populate","select","exec","result","logger","info","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","box","newRecord","recipient","sender","subject","User","findOne","_id","personR","Sender","created_by","personS","email","send1","send2","save","newRecord2","result2","createRecord","id","params","recordId","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":";;;;;;;;uEAeO,iBAA2BA,GAA3B,EAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,6BADL,GACeF,GADf,CACKE,KADL;AAAA,+BAE+C,8BAAIA,KAAJ,CAF/C,EAEKC,MAFL,QAEKA,MAFL,EAEaC,IAFb,QAEaA,IAFb,EAEmBC,KAFnB,QAEmBA,KAFnB,EAE0BC,IAF1B,QAE0BA,IAF1B,EAEgCC,UAFhC,QAEgCA,UAFhC;AAAA;AAAA;AAIgB,+BAAMC,gBAAQC,IAAR,CAAaN,MAAb,EAChBO,QADgB,CACP,MADO,EACC,kCADD,EAEhBA,QAFgB,CAEP,YAFO,EAEO,8CAFP,EAGhBA,QAHgB,CAGP,YAHO,EAGO,8CAHP,EAIhBN,IAJgB,CAIXA,IAJW,EAKhBC,KALgB,CAKVA,KALU,EAMhBC,IANgB,CAMXA,IANW,EAOhBK,MAPgB,CAOTJ,UAPS,EAQhBK,IARgB,EAAN;;AAJhB;AAIOC,8BAJP;;AAAA,4BAaMA,MAbN;AAAA;AAAA;AAAA;;AAAA,yDAcY,mBAASZ,GAAT,EAAc,qCAAd,CAdZ;;AAAA;AAgBCa,+BAAOC,IAAP,CAAY,0BAAZ,EAAwC,EAAxC;AAhBD,yDAiBQ,kBAAQd,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,IAA1B,CAjBR;;AAAA;AAAA;AAAA;;AAmBCC,+BAAOE,KAAP;AAnBD,yDAoBQ,eAAKf,GAAL,EAAU,GAAV,gCAA2C,YAAIgB,OAA/C,CApBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,W;;;;;AAwBtB;;;;wEACO,kBAA4BlB,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGkB,4BADH,GACUnB,IAAIoB,IADd;AAAA,wCAEeC,cAAIC,QAAJ,CAAaH,IAAb,EAAmBI,mBAAnB,CAFf,EAEKP,KAFL,iBAEKA,KAFL;;AAAA,6BAGCA,KAHD;AAAA;AAAA;AAAA;;AAAA,0DAGe,eAAKf,GAAL,EAAU,GAAV,sCAAiDe,MAAMC,OAAvD,CAHf;;AAAA;AAAA;;AAKCE,6BAAKK,GAAL,GAAW,OAAX;AACMC,iCANP,GAMmB,IAAIjB,eAAJ,CAAYW,IAAZ,CANnB;AAOSO,iCAPT,GAO8CP,IAP9C,CAOSO,SAPT,EAOoBC,MAPpB,GAO8CR,IAP9C,CAOoBQ,MAPpB,EAO4BC,OAP5B,GAO8CT,IAP9C,CAO4BS,OAP5B,EAOqCR,IAPrC,GAO8CD,IAP9C,CAOqCC,IAPrC;AAAA;AAQiB,+BAAMS,gBAAKC,OAAL,CAAa,EAAEC,KAAKL,SAAP,EAAb,EAAiCf,MAAjC,CAAwC,OAAxC,EAAiDC,IAAjD,EAAN;;AARjB;AAQOoB,+BARP;AASKC,8BATL;AAAA;AAUiB,+BAAMA,OAAOH,OAAP,CAAe,EAAEC,KAAKZ,KAAKe,UAAZ,EAAf,EAAyCvB,MAAzC,CAAgD,OAAhD,EAAyDC,IAAzD,EAAN;;AAVjB;AAUOuB,+BAVP;AAAA;AAWe,+BAAM,yBAAUH,QAAQI,KAAlB,EAAyBD,QAAQC,KAAjC,EAAwCR,OAAxC,EAAiDR,IAAjD,CAAN;;AAXf;AAWOiB,6BAXP;AAAA;AAYe,+BAAM,yBAAUF,QAAQC,KAAlB,EAAyBD,QAAQC,KAAjC,EAAwCR,OAAxC,EAAiDR,IAAjD,CAAN;;AAZf;AAYOkB,6BAZP;AAAA;AAcgB,+BAAMb,UAAUc,IAAV,EAAN;;AAdhB;AAcO1B,8BAdP;;AAAA,4BAeMA,MAfN;AAAA;AAAA;AAAA;;AAgBKC,+BAAOE,KAAP,CAAa,kBAAb,EAAiCqB,KAAjC,EAAwCC,KAAxC,EAA+C,EAA/C;AAhBL,0DAiBY,mBAASrC,GAAT,EAAc,qCAAd,CAjBZ;;AAAA;AAmBCkB,6BAAKK,GAAL,GAAW,QAAX;AACMgB,kCApBP,GAoBoB,IAAIhC,eAAJ,CAAYW,IAAZ,CApBpB;AAAA;AAqBiB,+BAAMqB,WAAWD,IAAX,EAAN;;AArBjB;AAqBOE,+BArBP;AAAA,0DAsBQ,kBAAQxC,GAAR,EAAa,GAAb,EAAkBwC,OAAlB,EAA2B,8BAA3B,CAtBR;;AAAA;AAAA;AAAA;;AAwBC3B,+BAAOE,KAAP;AAxBD,0DAyBQ,eAAKf,GAAL,EAAU,GAAV,8BAAyC,aAAIgB,OAA7C,CAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeyB,Y;;;;;;wEA6Bf,kBAA4B1C,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACe0C,0BADf,GACsB3C,IAAI4C,MAD1B,CACKC,QADL;AAAA;AAAA;AAGgB,+BAAMrC,gBAAQsC,gBAAR,CAAyB,EAAEf,KAAKY,EAAP,EAAzB,CAAN;;AAHhB;AAGO9B,8BAHP;;AAAA,4BAIMA,MAJN;AAAA;AAAA;AAAA;;AAAA,0DAKY,mBAASZ,GAAT,4CAAsD0C,EAAtD,CALZ;;AAAA;AAAA,0DAOQ,kBAAQ1C,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,8BAA1B,CAPR;;AAAA;AAAA;AAAA;;AASCC,+BAAOE,KAAP;AATD,0DAUQ,eAAKf,GAAL,EAAU,GAAV,8BAAyC,aAAIgB,OAA7C,CAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe8B,Y;;;;;AArEtB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,IAAMjC,SAASkC,iBAAOC,SAAP,CAAiB,WAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEC,MAAM,MAAR,EAAgBC,UAAU,kBAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEL,WAAW,CAAC,MAAD,CAAb,EAAuBM,OAAO,OAA9B,EAAX;AAFC,CAAjB","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdated } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../lib\";\nimport { sendEmail } from \"../../services\";\nimport User from \"../user/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Message.find(filter)\n            .populate(\"user\", \"id phone email username fullname\")\n            .populate(\"created_by\", \"id username fullname, phone email type level\")\n            .populate(\"updated_by\", \"id username fullname, phone email type level\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        const personR = await User.findOne({ _id: recipient }).select(\"email\").exec();\n        let Sender;\n        const personS = await Sender.findOne({ _id: data.created_by }).select(\"email\").exec();\n        const send1 = await sendEmail(personR.email, personS.email, subject, body);\n        const send2 = await sendEmail(personS.email, personS.email, subject, body);\n        // console.log(send);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(\"Operation failed\", send1, send2, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}