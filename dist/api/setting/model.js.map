{"version":3,"sources":["../../../src/api/setting/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaFetch","Joi","object","names","string","optional","fields","schemaUpdate","name","trim","access","valid","value","category","description","updated_by","required","schema","type","String","uppercase","unique","enum","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","Setting","model","insertMany","table"],"mappings":";;;;;;;AAUA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M,EAhBR;;;;;;;;;;;IAiBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,oCAAcC,cAAIC,MAAJ,CAAW;AAClCC,WAAOF,cAAIG,MAAJ,GAAaC,QAAb,EAD2B;AAElCC,YAAQL,cAAIG,MAAJ,GAAaC,QAAb;AAF0B,CAAX,CAApB;;AAKA,IAAME,sCAAeN,cAAIC,MAAJ,CAAW;AACnCM,UAAMP,cAAIG,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB,EAD6B;AAEnCK,YAAQT,cAAIG,MAAJ,GAAaK,IAAb,GAAoBE,KAApB,CAA0B,QAA1B,EAAoC,SAApC,EAA+CN,QAA/C,EAF2B;AAGnCO,WAAOX,cAAIG,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB,EAH4B;AAInCQ,cAAUZ,cAAIG,MAAJ,GAAaC,QAAb,EAJyB;AAKnCS,iBAAab,cAAIG,MAAJ,GAAaC,QAAb,EALsB;AAMnCU,gBAAYd,cAAIG,MAAJ,GAAaY,QAAb;AANuB,CAAX,CAArB;;AASA,IAAMC,0BAAS;AAClBT,UAAM;AACFU,cAAMC,MADJ;AAEFC,mBAAW,IAFT;AAGFC,gBAAQ,IAHN;AAIFL,kBAAU,CAAC,IAAD,EAAO,cAAP;AAJR,KADY;AAOlBN,YAAQ,EAAEQ,MAAMC,MAAR,EAAgBG,MAAM,CAAC,QAAD,EAAW,SAAX,CAAtB,EAA6CN,UAAU,CAAC,IAAD,EAAO,gBAAP,CAAvD,EAPU;AAQlBJ,WAAO,EAAEM,MAAMC,MAAR,EAAgBH,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EARW;AASlBH,cAAU,EAAEK,MAAMC,MAAR,EATQ;AAUlBL,iBAAa,EAAEI,MAAMC,MAAR,EAAgBH,UAAU,CAAC,IAAD,EAAO,qBAAP,CAA1B,EAVK;AAWlBD,gBAAY,EAAEG,MAAMpB,QAAR,EAAkByB,KAAK,MAAvB;AAXM,CAAf;;AAcP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAIlC,MAAJ,CAAWqB,MAAX,EAAmBW,OAAnB,CAAlB;AACAE,UAAUC,KAAV,CAAgB,EAAEvB,MAAM,CAAR,EAAhB,EAA6B,EAAEa,QAAQ,IAAV,EAA7B;AACAS,UAAUE,GAAV,CAAc,YAAd,EAA4B,SAA5B;;AAEA,IAAMC,UAAUpC,mBAASqC,KAAT,CAAe,SAAf,EAA0BJ,SAA1B,CAAhB;;AAEA,IAAIN,OAAJ,EAAa;AAAES,YAAQE,UAAR,CAAmBC,eAAnB;AAA4B;;kBAE5BH,O","file":"model.js","sourcesContent":["/**\n * @author 4Decoder\n * @property {Number} id Setting primaryKey\n * @property {String} name Setting varaible name\n * @property {String} access Setting \"public\", \"private\"\n * @property {String} category Setting category of domains affected\n * @property {String} value Setting value value\n * @property {String} description Setting description\n * @description Setting holds record of all cities with schools\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaFetch = Joi.object({\n    names: Joi.string().optional(),\n    fields: Joi.string().optional(),\n});\n\nexport const schemaUpdate = Joi.object({\n    name: Joi.string().trim().optional(),\n    access: Joi.string().trim().valid(\"public\", \"private\").optional(),\n    value: Joi.string().trim().optional(),\n    category: Joi.string().optional(),\n    description: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    name: {\n        type: String,\n        uppercase: true,\n        unique: true,\n        required: [true, \"Why no name?\"],\n    },\n    access: { type: String, enum: [\"public\", \"private\"], required: [true, \"Why no access?\"] },\n    value: { type: String, required: [true, \"Why no value?\"] },\n    category: { type: String },\n    description: { type: String, required: [true, \"Why no description?\"] },\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.index({ name: 1 }, { unique: true });\nnewSchema.set(\"collection\", \"setting\");\n\nconst Setting = mongoose.model(\"Setting\", newSchema);\n\nif (preload) { Setting.insertMany(table); }\n\nexport default Setting;\n"]}