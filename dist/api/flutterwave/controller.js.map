{"version":3,"sources":["../../../src/api/flutterwave/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Flutterwave","find","populate","select","exec","result","logger","info","error","message","fetchRecord","page","id","from","to","currency","status","data","console","log","queryOnlineTnx","fetchSettlement","requestHash","headers","flutterwaveHash","process","env","FLUTTERWAVE_HASH","body","flwId","flwCreatedAt","createdAt","cleanData","newRecord","save","createRecord","bvn","params","Object","keys","verifyBvn","txref","verifyOnlineTnx","recordId","findOneAndUpdate","_id","new","patchRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":";;;;;;;;uEAYO,iBAA2BA,GAA3B,EAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,6BADL,GACeF,GADf,CACKE,KADL;AAAA,+BAE+C,8BAAIA,KAAJ,CAF/C,EAEKC,MAFL,QAEKA,MAFL,EAEaC,IAFb,QAEaA,IAFb,EAEmBC,KAFnB,QAEmBA,KAFnB,EAE0BC,IAF1B,QAE0BA,IAF1B,EAEgCC,UAFhC,QAEgCA,UAFhC;AAAA;AAAA;AAIgB,+BAAMC,gBAAYC,IAAZ,CAAiBN,MAAjB,EAChBO,QADgB,CACP,MADO,EACC,6DADD,EAEhBN,IAFgB,CAEXA,IAFW,EAGhBC,KAHgB,CAGVA,KAHU,EAIhBC,IAJgB,CAIXA,IAJW,EAKhBK,MALgB,CAKTJ,UALS,EAMhBK,IANgB,EAAN;;AAJhB;AAIOC,8BAJP;;AAAA,4BAWMA,MAXN;AAAA;AAAA;AAAA;;AAAA,yDAYY,mBAASZ,GAAT,EAAc,qCAAd,CAZZ;;AAAA;AAcCa,+BAAOC,IAAP,CAAY,0BAAZ,EAAwC,EAAxC;AAdD,yDAeQ,kBAAQd,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,IAA1B,CAfR;;AAAA;AAAA;AAAA;;AAiBCC,+BAAOE,KAAP;AAjBD,yDAkBQ,eAAKf,GAAL,EAAU,GAAV,gCAA2C,YAAIgB,OAA/C,CAlBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,W;;;;;AAsBtB;AACA;;;;wEACO,kBAA8BlB,GAA9B,EAAmCC,GAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGkB,4BADH,GACUnB,IAAIE,KAAJ,CAAUiB,IAAV,IAAkB,CAD5B,EAC+B;;AAC5Bd,6BAFH,GAEWL,IAAIE,KAAJ,CAAUG,KAAV,IAAmB,GAF9B;AAGGe,0BAHH,GAGQpB,IAAIE,KAAJ,CAAUkB,EAAV,IAAgB,EAHxB;AAIGC,4BAJH,GAIUrB,IAAIE,KAAJ,CAAUmB,IAAV,IAAkB,YAJ5B;AAKGC,0BALH,GAKQtB,IAAIE,KAAJ,CAAUoB,EAAV,IAAgB,YALxB;AAMGC,gCANH,GAMcvB,IAAIE,KAAJ,CAAUqB,QAAV,IAAsB,KANpC;AAOGC,8BAPH,GAOYxB,IAAIE,KAAJ,CAAUsB,MAAV,IAAoB,YAPhC;AAQCX,8BARD;AAAA;;AAAA,6BAUKO,EAVL;AAAA;AAAA;AAAA;;AAAA;AAWc,+BAAM,8BAAe,EAAEA,MAAF,EAAf,EAAuB,IAAvB,CAAN;;AAXd;AAWKP,8BAXL;AAAA;AAAA;;AAAA;AAAA;AAac,+BAAM,8BAAe,EAAEQ,UAAF,EAAQC,MAAR,EAAYC,kBAAZ,EAAsBC,cAAtB,EAAf,EAA+C,KAA/C,CAAN;;AAbd;AAaKX,8BAbL;;AAAA;AAAA,8BAeKA,OAAOW,MAAP,KAAkB,SAfvB;AAAA;AAAA;AAAA;;AAAA,0DAgBY,kBAAQvB,GAAR,EAAa,GAAb,EAAkBY,OAAOY,IAAzB,EAA+BZ,OAAOI,OAAtC,CAhBZ;;AAAA;AAkBCS,gCAAQC,GAAR,CAAYd,MAAZ;AAlBD,0DAmBQ,mBAASZ,GAAT,EAAcY,OAAOI,OAArB,CAnBR;;AAAA;AAAA;AAAA;;AAqBCH,+BAAOE,KAAP;AArBD,0DAsBQ,eAAKf,GAAL,EAAU,GAAV,kDAA6D,aAAIgB,OAAjE,CAtBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeW,c;;;;;AA0BtB;;;;wEACO,kBAA+B5B,GAA/B,EAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGkB,4BADH,GACUnB,IAAIE,KAAJ,CAAUiB,IAAV,IAAkB,CAD5B,EAC+B;;AAC5Bd,6BAFH,GAEWL,IAAIE,KAAJ,CAAUG,KAAV,IAAmB,GAF9B;AAGGmB,8BAHH,GAGYxB,IAAIE,KAAJ,CAAUsB,MAAV,IAAoB,WAHhC;AAAA;AAAA;AAKgB,+BAAM,6BAAc,EAAEL,UAAF,EAAQd,YAAR,EAAemB,cAAf,EAAd,CAAN;;AALhB;AAKOX,8BALP;;AAAA,8BAMKA,OAAOW,MAAP,KAAkB,SANvB;AAAA;AAAA;AAAA;;AAAA,0DAOY,kBAAQvB,GAAR,EAAa,GAAb,EAAkBY,OAAOY,IAAzB,EAA+BZ,OAAOI,OAAtC,CAPZ;;AAAA;AASCS,gCAAQC,GAAR,CAAYd,MAAZ;AATD,0DAUQ,mBAASZ,GAAT,EAAcY,OAAOI,OAArB,CAVR;;AAAA;AAAA;AAAA;;AAYCH,+BAAOE,KAAP;AAZD,0DAaQ,eAAKf,GAAL,EAAU,GAAV,kCAA6C,aAAIgB,OAAjD,CAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeY,e;;;;;AAiBtB;;;;wEACO,kBAA4B7B,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACM6B,mCAFH,GAEiB9B,IAAI+B,OAAJ,CAAa,YAAb,CAFjB;;AAGH,4BAAI,CAACD,WAAL,EAAkB;AACdhB,mCAAOE,KAAP,CAAa,EAAEC,SAAS,4BAAX,EAAb;AACA;AACH;;AAEKe,uCARH,GAQqBC,QAAQC,GAAR,CAAYC,gBARjC;;AASH,4BAAIL,gBAAgBE,eAApB,EAAqC;AACjClB,mCAAOE,KAAP,2CAAqDc,WAArD,EAAoE,EAApE;AACA;AACH;;AAEKL,4BAdH,GAcUzB,IAAIoC,IAdd,EAcoB;;AACvBX,6BAAKY,KAAL,GAAaZ,KAAKL,EAAlB;AACA,+BAAOK,KAAKL,EAAZ;AACAK,6BAAKa,YAAL,GAAoBb,KAAKc,SAAzB;AACA,+BAAOd,KAAKc,SAAZ;AACMC,iCAnBH,GAmBe,sBAAYf,IAAZ,CAnBf;;AAqBH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEMgB,iCA9BH,GA8Be,IAAIjC,eAAJ,CAAgBiB,IAAhB,CA9Bf;AAAA;AAAA;AAgCgB,+BAAMgB,UAAUC,IAAV,EAAN;;AAhChB;AAgCO7B,8BAhCP;;AAiCC,4BAAI,CAACA,MAAL,EAAa;AACTC,mCAAOC,IAAP,CAAY,0BAAZ,EAAwC,EAAxC;AACA;AACH;AApCF,0DAqCQ,kBAAQd,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,8BAA1B,CArCR;;AAAA;AAAA;AAAA;;AAuCCC,+BAAOE,KAAP;AACA;;AAxCD;AAAA,0DA0CI,kBAAQf,GAAR,EAAa,GAAb,EAAkB,EAAlB,EAAsB,6BAAtB,CA1CJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe0C,Y;;;;;;wEA6Cf,kBAAyB3C,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACK2C,2BADL,GACa5C,IAAI6C,MADjB,CACKD,GADL;AAAA;AAAA;AAGgB,+BAAM,sBAAOA,GAAP,CAAN;;AAHhB;AAGO/B,8BAHP;;AAAA,8BAIKA,OAAOW,MAAP,KAAkB,SAJvB;AAAA;AAAA;AAAA;;AAAA,0DAKY,kBAAQvB,GAAR,EAAa,GAAb,EAAkBY,OAAOY,IAAzB,EAA+BZ,OAAOI,OAAtC,CALZ;;AAAA;AAOCS,gCAAQC,GAAR,CAAYmB,OAAOC,IAAP,CAAYlC,MAAZ,CAAZ;AAPD,0DAQQ,mBAASZ,GAAT,EAAcY,OAAOI,OAArB,CARR;;AAAA;AAAA;AAAA;;AAUCH,+BAAOE,KAAP;AAVD,0DAWQ,eAAKf,GAAL,EAAU,GAAV,2BAAsC,aAAIgB,OAA1C,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe+B,S;;;;;;wEAef,kBAA+BhD,GAA/B,EAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKgD,6BADL,GACejD,IAAI6C,MADnB,CACKI,KADL;AAAA;AAAA;AAGgB,+BAAM,iCAAkBA,KAAlB,CAAN;;AAHhB;AAGOpC,8BAHP;;AAAA,8BAIKA,OAAOW,MAAP,KAAkB,SAJvB;AAAA;AAAA;AAAA;;AAAA,0DAKY,kBAAQvB,GAAR,EAAa,GAAb,EAAkBY,OAAOY,IAAzB,EAA+BZ,OAAOI,OAAtC,CALZ;;AAAA;AAOCS,gCAAQC,GAAR,CAAYd,MAAZ;AAPD,0DAQQ,mBAASZ,GAAT,EAAcY,OAAOI,OAArB,CARR;;AAAA;AAAA;AAAA;;AAUCH,+BAAOE,KAAP;AAVD,0DAWQ,eAAKf,GAAL,EAAU,GAAV,2BAAsC,aAAIgB,OAA1C,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiC,e;;;;;;wEAef,kBAA2BlD,GAA3B,EAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGwB,4BADH,GACUzB,IAAIoC,IADd;AAEehB,0BAFf,GAEsBpB,IAAI6C,MAF1B,CAEKM,QAFL;AAAA;AAAA;AAIgB,+BAAM3C,gBAAY4C,gBAAZ,CAA6B,EAAEC,KAAKjC,EAAP,EAA7B,EAA0CK,IAA1C,EAAgD,EAAE6B,KAAK,IAAP,EAAhD,CAAN;;AAJhB;AAIOzC,8BAJP;;AAAA,4BAKMA,MALN;AAAA;AAAA;AAAA;;AAAA,0DAMY,mBAASZ,GAAT,4CAAsDmB,EAAtD,CANZ;;AAAA;AAAA,0DAQQ,kBAAQnB,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,8BAA1B,CARR;;AAAA;AAAA;AAAA;;AAUCC,+BAAOE,KAAP;AAVD,0DAWQ,eAAKf,GAAL,EAAU,GAAV,8BAAyC,aAAIgB,OAA7C,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAesC,W;;;;;AA5JtB;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;AACA,IAAMzC,SAAS0C,iBAAOC,SAAP,CAAiB,eAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEC,MAAM,MAAR,EAAgBC,UAAU,sBAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEL,WAAW,CAAC,MAAD,CAAb,EAAuBM,OAAO,OAA9B,EAAX;AAFC,CAAjB","file":"controller.js","sourcesContent":["import log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Flutterwave, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId, cleanObject } from \"../../lib\";\nimport { getBVn, getTransaction, getSettlement, verifyTransaction } from \"../../services\";\n\n// Logging\nconst logger = log4js.getLogger(\"[flutterwave]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/flutterwave.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Flutterwave.find(filter)\n            .populate(\"user\", \"title surname given_name email phone credit blocked deleted\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// fetch online transaction records\n// eslint-disable-next-line complexity\nexport async function queryOnlineTnx(req, res) {\n    const page = req.query.page || 0; // 1\n    const limit = req.query.limit || 100;\n    const id = req.query.id || \"\";\n    const from = req.query.from || \"2019-01-01\";\n    const to = req.query.to || \"2019-12-31\";\n    const currency = req.query.currency || \"NGN\";\n    const status = req.query.status || \"successful\";\n    let result;\n    try {\n        if (id) {\n            result = await getTransaction({ id }, true);\n        } else {\n            result = await getTransaction({ from, to, currency, status }, false);\n        }\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error query Transactions from Flutterwave. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function fetchSettlement(req, res) {\n    const page = req.query.page || 0; // 1\n    const limit = req.query.limit || 100;\n    const status = req.query.status || \"completed\";\n    try {\n        const result = await getSettlement({ page, limit, status });\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching Settlement. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    // Verify Hash\n    const requestHash = req.headers[ \"verif-hash\" ];\n    if (!requestHash) {\n        logger.error({ message: \"Bad request! No hash found\" });\n        // return fail(res, 422, \"Error: Bad Request: hash not found\");\n    }\n\n    const flutterwaveHash = process.env.FLUTTERWAVE_HASH;\n    if (requestHash !== flutterwaveHash) {\n        logger.error(`Error invalid transaction signature. ${requestHash}`, []);\n        // return fail(res, 422, `Error invalid transaction signature. ${requestHash}`);\n    }\n\n    const data = req.body; // JSON.parse(req.body);\n    data.flwId = data.id;\n    delete data.id;\n    data.flwCreatedAt = data.createdAt;\n    delete data.createdAt;\n    const cleanData = cleanObject(data);\n\n    // const { error } = Joi.validate(cleanData, schemaCreate);\n    // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n    // Give value to your customer but don't give any output\n    // Remember that this is a call from rave's servers and\n    // Your customer is not seeing the response here at all\n    // return success(res, 200, result, \"Transaction was successful!\");\n    // Update Invoice if it exist or create an invoice with status of \"success\"\n\n    const newRecord = new Flutterwave(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(\"Operation was successful\", []);\n            // return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        // return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n    return success(res, 200, [], \"Transaction was successful!\");\n}\n\nexport async function verifyBvn(req, res) {\n    const { bvn } = req.params;\n    try {\n        const result = await getBVn(bvn);\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(Object.keys(result));\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\n    }\n}\n\nexport async function verifyOnlineTnx(req, res) {\n    const { txref } = req.params;\n    try {\n        const result = await verifyTransaction(txref);\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\n    }\n}\n\nexport async function patchRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    try {\n        const result = await Flutterwave.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record patched successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error patching record. ${err.message}`);\n    }\n}\n"]}