{"version":3,"sources":["../../../src/api/message/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","Joi","object","code","string","required","user","sender","email","recipient","subject","body","receive_status","valid","optional","sent_status","created_by","schemaUpdate","updated_by","schema","type","String","unique","index","ref","trim","lowercase","match","box","enum","default","options","DATABASE","OPTIONS","newSchema","set","Message","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Message primaryKey\n * @property {String} code Message code for querying email\n * @property {ObjectId} user Message user or creator\n * @property {String} sender Message sender email\n * @property {String} recipient Message recipient email\n * @property {String} subject Message subject\n * @property {String} body Message body\n * @property {String} receive_status Message receive_status\n * @property {String} sent_status Message sent_status\n * @description Message model holds record of all internal mails between user\n * For multiple recepient, a record is created for each to enable tracking of\n * individual status\n */\nimport Joi from \"@hapi/joi\";\nimport mongoose from \"mongoose\";\nimport { DATABASE } from \"../../constants\";\nimport User from \"../user/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = Joi.object({\n    code: Joi.string().required(),\n    user: Joi.string().required(),\n    sender: Joi.string().email().required(),\n    recipient: Joi.string().email().required(),\n    subject: Joi.string().required(),\n    body: Joi.string().required(),\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    created_by: Joi.string().required(),\n});\n\nexport const schemaUpdate = Joi.object({\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    updated_by: Joi.string().required(),\n});\n\nexport const schema = {\n    code: { type: String, required: true, unique: true, index: true },\n    user: { type: ObjectId, ref: \"User\", required: true },\n    sender: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address for sender\"],\n        index: true,\n    },\n    recipient: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address for the recipient\"],\n        index: true,\n    },\n    subject: { type: String, required: true },\n    body: { type: String, required: true },\n    box: { type: String, enum: [\"INBOX\", \"OUTBOX\"], required: true },\n    receive_status: { type: String, enum: [\"UNREAD\", \"READ\"], required: true, default: \"UNREAD\" },\n    sent_status: { type: String, enum: [\"DRAFT\", \"SENT\"], required: true, default: \"DRAFT\" },\n    created_by: { type: ObjectId, ref: \"User\", required: true }, // Sender\n    updated_by: { type: ObjectId, ref: \"User\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"message\");\n\nconst Message = mongoose.model(\"Message\", newSchema);\n\nexport default Message;\n"]}